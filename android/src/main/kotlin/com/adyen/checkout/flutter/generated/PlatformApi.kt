// Autogenerated from Pigeon (v21.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.adyen.checkout.flutter.generated

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is AdyenPigeonError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): AdyenPigeonError {
  return AdyenPigeonError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class AdyenPigeonError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class Environment(val raw: Int) {
  TEST(0),
  EUROPE(1),
  UNITED_STATES(2),
  AUSTRALIA(3),
  INDIA(4),
  APSE(5);

  companion object {
    fun ofRaw(raw: Int): Environment? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class AddressMode(val raw: Int) {
  FULL(0),
  POSTAL_CODE(1),
  NONE(2);

  companion object {
    fun ofRaw(raw: Int): AddressMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CardAuthMethod(val raw: Int) {
  PAN_ONLY(0),
  CRYPTOGRAM3DS(1);

  companion object {
    fun ofRaw(raw: Int): CardAuthMethod? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class TotalPriceStatus(val raw: Int) {
  NOT_CURRENTLY_KNOWN(0),
  ESTIMATED(1),
  FINAL_PRICE(2);

  companion object {
    fun ofRaw(raw: Int): TotalPriceStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class GooglePayEnvironment(val raw: Int) {
  TEST(0),
  PRODUCTION(1);

  companion object {
    fun ofRaw(raw: Int): GooglePayEnvironment? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CashAppPayEnvironment(val raw: Int) {
  SANDBOX(0),
  PRODUCTION(1);

  companion object {
    fun ofRaw(raw: Int): CashAppPayEnvironment? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PaymentResultEnum(val raw: Int) {
  CANCELLED_BY_USER(0),
  ERROR(1),
  FINISHED(2);

  companion object {
    fun ofRaw(raw: Int): PaymentResultEnum? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CheckoutEventType(val raw: Int) {
  PAYMENT_COMPONENT(0),
  ADDITIONAL_DETAILS(1),
  RESULT(2),
  DELETE_STORED_PAYMENT_METHOD(3),
  BALANCE_CHECK(4),
  REQUEST_ORDER(5),
  CANCEL_ORDER(6),
  BIN_LOOKUP(7),
  BIN_VALUE(8);

  companion object {
    fun ofRaw(raw: Int): CheckoutEventType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ComponentCommunicationType(val raw: Int) {
  ON_SUBMIT(0),
  ADDITIONAL_DETAILS(1),
  LOADING(2),
  RESULT(3),
  RESIZE(4),
  BIN_LOOKUP(5),
  BIN_VALUE(6);

  companion object {
    fun ofRaw(raw: Int): ComponentCommunicationType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PaymentEventType(val raw: Int) {
  FINISHED(0),
  ACTION(1),
  ERROR(2),
  UPDATE(3);

  companion object {
    fun ofRaw(raw: Int): PaymentEventType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FieldVisibility(val raw: Int) {
  SHOW(0),
  HIDE(1);

  companion object {
    fun ofRaw(raw: Int): FieldVisibility? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class InstantPaymentType(val raw: Int) {
  GOOGLE_PAY(0),
  APPLE_PAY(1),
  INSTANT(2);

  companion object {
    fun ofRaw(raw: Int): InstantPaymentType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ApplePayShippingType(val raw: Int) {
  SHIPPING(0),
  DELIVERY(1),
  STORE_PICKUP(2),
  SERVICE_PICKUP(3);

  companion object {
    fun ofRaw(raw: Int): ApplePayShippingType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ApplePayMerchantCapability(val raw: Int) {
  DEBIT(0),
  CREDIT(1);

  companion object {
    fun ofRaw(raw: Int): ApplePayMerchantCapability? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ApplePaySummaryItemType(val raw: Int) {
  PENDING(0),
  DEFINITE(1);

  companion object {
    fun ofRaw(raw: Int): ApplePaySummaryItemType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CardNumberValidationResultDTO(val raw: Int) {
  VALID(0),
  INVALID_ILLEGAL_CHARACTERS(1),
  INVALID_LUHN_CHECK(2),
  INVALID_TOO_SHORT(3),
  INVALID_TOO_LONG(4),
  INVALID_OTHER_REASON(5);

  companion object {
    fun ofRaw(raw: Int): CardNumberValidationResultDTO? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CardExpiryDateValidationResultDTO(val raw: Int) {
  VALID(0),
  INVALID_TOO_FAR_IN_THE_FUTURE(1),
  INVALID_TOO_OLD(2),
  NON_PARSEABLE_DATE(3),
  INVALID_OTHER_REASON(4);

  companion object {
    fun ofRaw(raw: Int): CardExpiryDateValidationResultDTO? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CardSecurityCodeValidationResultDTO(val raw: Int) {
  VALID(0),
  INVALID(1);

  companion object {
    fun ofRaw(raw: Int): CardSecurityCodeValidationResultDTO? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class SessionDTO (
  val id: String,
  val sessionData: String,
  val paymentMethodsJson: String

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): SessionDTO {
      val id = __pigeon_list[0] as String
      val sessionData = __pigeon_list[1] as String
      val paymentMethodsJson = __pigeon_list[2] as String
      return SessionDTO(id, sessionData, paymentMethodsJson)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      sessionData,
      paymentMethodsJson,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AmountDTO (
  val currency: String,
  val value: Long

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): AmountDTO {
      val currency = __pigeon_list[0] as String
      val value = __pigeon_list[1].let { num -> if (num is Int) num.toLong() else num as Long }
      return AmountDTO(currency, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      currency,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AnalyticsOptionsDTO (
  val enabled: Boolean,
  val version: String

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): AnalyticsOptionsDTO {
      val enabled = __pigeon_list[0] as Boolean
      val version = __pigeon_list[1] as String
      return AnalyticsOptionsDTO(enabled, version)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      enabled,
      version,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DropInConfigurationDTO (
  val environment: Environment,
  val clientKey: String,
  val countryCode: String,
  val amount: AmountDTO? = null,
  val shopperLocale: String? = null,
  val cardConfigurationDTO: CardConfigurationDTO? = null,
  val applePayConfigurationDTO: ApplePayConfigurationDTO? = null,
  val googlePayConfigurationDTO: GooglePayConfigurationDTO? = null,
  val cashAppPayConfigurationDTO: CashAppPayConfigurationDTO? = null,
  val analyticsOptionsDTO: AnalyticsOptionsDTO,
  val showPreselectedStoredPaymentMethod: Boolean,
  val skipListWhenSinglePaymentMethod: Boolean,
  val isRemoveStoredPaymentMethodEnabled: Boolean,
  val preselectedPaymentMethodTitle: String? = null,
  val paymentMethodNames: Map<String?, String?>? = null,
  val isPartialPaymentSupported: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): DropInConfigurationDTO {
      val environment = __pigeon_list[0] as Environment
      val clientKey = __pigeon_list[1] as String
      val countryCode = __pigeon_list[2] as String
      val amount = __pigeon_list[3] as AmountDTO?
      val shopperLocale = __pigeon_list[4] as String?
      val cardConfigurationDTO = __pigeon_list[5] as CardConfigurationDTO?
      val applePayConfigurationDTO = __pigeon_list[6] as ApplePayConfigurationDTO?
      val googlePayConfigurationDTO = __pigeon_list[7] as GooglePayConfigurationDTO?
      val cashAppPayConfigurationDTO = __pigeon_list[8] as CashAppPayConfigurationDTO?
      val analyticsOptionsDTO = __pigeon_list[9] as AnalyticsOptionsDTO
      val showPreselectedStoredPaymentMethod = __pigeon_list[10] as Boolean
      val skipListWhenSinglePaymentMethod = __pigeon_list[11] as Boolean
      val isRemoveStoredPaymentMethodEnabled = __pigeon_list[12] as Boolean
      val preselectedPaymentMethodTitle = __pigeon_list[13] as String?
      val paymentMethodNames = __pigeon_list[14] as Map<String?, String?>?
      val isPartialPaymentSupported = __pigeon_list[15] as Boolean
      return DropInConfigurationDTO(environment, clientKey, countryCode, amount, shopperLocale, cardConfigurationDTO, applePayConfigurationDTO, googlePayConfigurationDTO, cashAppPayConfigurationDTO, analyticsOptionsDTO, showPreselectedStoredPaymentMethod, skipListWhenSinglePaymentMethod, isRemoveStoredPaymentMethodEnabled, preselectedPaymentMethodTitle, paymentMethodNames, isPartialPaymentSupported)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      environment,
      clientKey,
      countryCode,
      amount,
      shopperLocale,
      cardConfigurationDTO,
      applePayConfigurationDTO,
      googlePayConfigurationDTO,
      cashAppPayConfigurationDTO,
      analyticsOptionsDTO,
      showPreselectedStoredPaymentMethod,
      skipListWhenSinglePaymentMethod,
      isRemoveStoredPaymentMethodEnabled,
      preselectedPaymentMethodTitle,
      paymentMethodNames,
      isPartialPaymentSupported,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CardConfigurationDTO (
  val holderNameRequired: Boolean,
  val addressMode: AddressMode,
  val showStorePaymentField: Boolean,
  val showCvcForStoredCard: Boolean,
  val showCvc: Boolean,
  val kcpFieldVisibility: FieldVisibility,
  val socialSecurityNumberFieldVisibility: FieldVisibility,
  val supportedCardTypes: List<String?>

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): CardConfigurationDTO {
      val holderNameRequired = __pigeon_list[0] as Boolean
      val addressMode = __pigeon_list[1] as AddressMode
      val showStorePaymentField = __pigeon_list[2] as Boolean
      val showCvcForStoredCard = __pigeon_list[3] as Boolean
      val showCvc = __pigeon_list[4] as Boolean
      val kcpFieldVisibility = __pigeon_list[5] as FieldVisibility
      val socialSecurityNumberFieldVisibility = __pigeon_list[6] as FieldVisibility
      val supportedCardTypes = __pigeon_list[7] as List<String?>
      return CardConfigurationDTO(holderNameRequired, addressMode, showStorePaymentField, showCvcForStoredCard, showCvc, kcpFieldVisibility, socialSecurityNumberFieldVisibility, supportedCardTypes)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      holderNameRequired,
      addressMode,
      showStorePaymentField,
      showCvcForStoredCard,
      showCvc,
      kcpFieldVisibility,
      socialSecurityNumberFieldVisibility,
      supportedCardTypes,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApplePayConfigurationDTO (
  val merchantId: String,
  val merchantName: String,
  val allowOnboarding: Boolean? = null,
  val summaryItems: List<ApplePaySummaryItemDTO?>? = null,
  val requiredBillingContactFields: List<String?>? = null,
  val billingContact: ApplePayContactDTO? = null,
  val requiredShippingContactFields: List<String?>? = null,
  val shippingContact: ApplePayContactDTO? = null,
  val applePayShippingType: ApplePayShippingType? = null,
  val allowShippingContactEditing: Boolean? = null,
  val shippingMethods: List<ApplePayShippingMethodDTO?>? = null,
  val applicationData: String? = null,
  val supportedCountries: List<String?>? = null,
  val merchantCapability: ApplePayMerchantCapability? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ApplePayConfigurationDTO {
      val merchantId = __pigeon_list[0] as String
      val merchantName = __pigeon_list[1] as String
      val allowOnboarding = __pigeon_list[2] as Boolean?
      val summaryItems = __pigeon_list[3] as List<ApplePaySummaryItemDTO?>?
      val requiredBillingContactFields = __pigeon_list[4] as List<String?>?
      val billingContact = __pigeon_list[5] as ApplePayContactDTO?
      val requiredShippingContactFields = __pigeon_list[6] as List<String?>?
      val shippingContact = __pigeon_list[7] as ApplePayContactDTO?
      val applePayShippingType = __pigeon_list[8] as ApplePayShippingType?
      val allowShippingContactEditing = __pigeon_list[9] as Boolean?
      val shippingMethods = __pigeon_list[10] as List<ApplePayShippingMethodDTO?>?
      val applicationData = __pigeon_list[11] as String?
      val supportedCountries = __pigeon_list[12] as List<String?>?
      val merchantCapability = __pigeon_list[13] as ApplePayMerchantCapability?
      return ApplePayConfigurationDTO(merchantId, merchantName, allowOnboarding, summaryItems, requiredBillingContactFields, billingContact, requiredShippingContactFields, shippingContact, applePayShippingType, allowShippingContactEditing, shippingMethods, applicationData, supportedCountries, merchantCapability)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      merchantId,
      merchantName,
      allowOnboarding,
      summaryItems,
      requiredBillingContactFields,
      billingContact,
      requiredShippingContactFields,
      shippingContact,
      applePayShippingType,
      allowShippingContactEditing,
      shippingMethods,
      applicationData,
      supportedCountries,
      merchantCapability,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApplePayContactDTO (
  val phoneNumber: String? = null,
  val emailAddress: String? = null,
  val givenName: String? = null,
  val familyName: String? = null,
  val phoneticGivenName: String? = null,
  val phoneticFamilyName: String? = null,
  val addressLines: List<String?>? = null,
  val subLocality: String? = null,
  val city: String? = null,
  val postalCode: String? = null,
  val subAdministrativeArea: String? = null,
  val administrativeArea: String? = null,
  val country: String? = null,
  val countryCode: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ApplePayContactDTO {
      val phoneNumber = __pigeon_list[0] as String?
      val emailAddress = __pigeon_list[1] as String?
      val givenName = __pigeon_list[2] as String?
      val familyName = __pigeon_list[3] as String?
      val phoneticGivenName = __pigeon_list[4] as String?
      val phoneticFamilyName = __pigeon_list[5] as String?
      val addressLines = __pigeon_list[6] as List<String?>?
      val subLocality = __pigeon_list[7] as String?
      val city = __pigeon_list[8] as String?
      val postalCode = __pigeon_list[9] as String?
      val subAdministrativeArea = __pigeon_list[10] as String?
      val administrativeArea = __pigeon_list[11] as String?
      val country = __pigeon_list[12] as String?
      val countryCode = __pigeon_list[13] as String?
      return ApplePayContactDTO(phoneNumber, emailAddress, givenName, familyName, phoneticGivenName, phoneticFamilyName, addressLines, subLocality, city, postalCode, subAdministrativeArea, administrativeArea, country, countryCode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      phoneNumber,
      emailAddress,
      givenName,
      familyName,
      phoneticGivenName,
      phoneticFamilyName,
      addressLines,
      subLocality,
      city,
      postalCode,
      subAdministrativeArea,
      administrativeArea,
      country,
      countryCode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApplePayShippingMethodDTO (
  val label: String,
  val detail: String,
  val amount: AmountDTO,
  val identifier: String,
  val startDate: String? = null,
  val endDate: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ApplePayShippingMethodDTO {
      val label = __pigeon_list[0] as String
      val detail = __pigeon_list[1] as String
      val amount = __pigeon_list[2] as AmountDTO
      val identifier = __pigeon_list[3] as String
      val startDate = __pigeon_list[4] as String?
      val endDate = __pigeon_list[5] as String?
      return ApplePayShippingMethodDTO(label, detail, amount, identifier, startDate, endDate)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      label,
      detail,
      amount,
      identifier,
      startDate,
      endDate,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ApplePaySummaryItemDTO (
  val label: String,
  val amount: AmountDTO,
  val type: ApplePaySummaryItemType

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ApplePaySummaryItemDTO {
      val label = __pigeon_list[0] as String
      val amount = __pigeon_list[1] as AmountDTO
      val type = __pigeon_list[2] as ApplePaySummaryItemType
      return ApplePaySummaryItemDTO(label, amount, type)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      label,
      amount,
      type,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GooglePayConfigurationDTO (
  val googlePayEnvironment: GooglePayEnvironment,
  val merchantAccount: String? = null,
  val merchantInfoDTO: MerchantInfoDTO? = null,
  val totalPriceStatus: TotalPriceStatus? = null,
  val allowedCardNetworks: List<String?>? = null,
  val allowedAuthMethods: List<String?>? = null,
  val allowPrepaidCards: Boolean? = null,
  val allowCreditCards: Boolean? = null,
  val assuranceDetailsRequired: Boolean? = null,
  val emailRequired: Boolean? = null,
  val existingPaymentMethodRequired: Boolean? = null,
  val shippingAddressRequired: Boolean? = null,
  val shippingAddressParametersDTO: ShippingAddressParametersDTO? = null,
  val billingAddressRequired: Boolean? = null,
  val billingAddressParametersDTO: BillingAddressParametersDTO? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): GooglePayConfigurationDTO {
      val googlePayEnvironment = __pigeon_list[0] as GooglePayEnvironment
      val merchantAccount = __pigeon_list[1] as String?
      val merchantInfoDTO = __pigeon_list[2] as MerchantInfoDTO?
      val totalPriceStatus = __pigeon_list[3] as TotalPriceStatus?
      val allowedCardNetworks = __pigeon_list[4] as List<String?>?
      val allowedAuthMethods = __pigeon_list[5] as List<String?>?
      val allowPrepaidCards = __pigeon_list[6] as Boolean?
      val allowCreditCards = __pigeon_list[7] as Boolean?
      val assuranceDetailsRequired = __pigeon_list[8] as Boolean?
      val emailRequired = __pigeon_list[9] as Boolean?
      val existingPaymentMethodRequired = __pigeon_list[10] as Boolean?
      val shippingAddressRequired = __pigeon_list[11] as Boolean?
      val shippingAddressParametersDTO = __pigeon_list[12] as ShippingAddressParametersDTO?
      val billingAddressRequired = __pigeon_list[13] as Boolean?
      val billingAddressParametersDTO = __pigeon_list[14] as BillingAddressParametersDTO?
      return GooglePayConfigurationDTO(googlePayEnvironment, merchantAccount, merchantInfoDTO, totalPriceStatus, allowedCardNetworks, allowedAuthMethods, allowPrepaidCards, allowCreditCards, assuranceDetailsRequired, emailRequired, existingPaymentMethodRequired, shippingAddressRequired, shippingAddressParametersDTO, billingAddressRequired, billingAddressParametersDTO)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      googlePayEnvironment,
      merchantAccount,
      merchantInfoDTO,
      totalPriceStatus,
      allowedCardNetworks,
      allowedAuthMethods,
      allowPrepaidCards,
      allowCreditCards,
      assuranceDetailsRequired,
      emailRequired,
      existingPaymentMethodRequired,
      shippingAddressRequired,
      shippingAddressParametersDTO,
      billingAddressRequired,
      billingAddressParametersDTO,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MerchantInfoDTO (
  val merchantName: String? = null,
  val merchantId: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): MerchantInfoDTO {
      val merchantName = __pigeon_list[0] as String?
      val merchantId = __pigeon_list[1] as String?
      return MerchantInfoDTO(merchantName, merchantId)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      merchantName,
      merchantId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ShippingAddressParametersDTO (
  val allowedCountryCodes: List<String?>? = null,
  val isPhoneNumberRequired: Boolean? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ShippingAddressParametersDTO {
      val allowedCountryCodes = __pigeon_list[0] as List<String?>?
      val isPhoneNumberRequired = __pigeon_list[1] as Boolean?
      return ShippingAddressParametersDTO(allowedCountryCodes, isPhoneNumberRequired)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      allowedCountryCodes,
      isPhoneNumberRequired,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BillingAddressParametersDTO (
  val format: String? = null,
  val isPhoneNumberRequired: Boolean? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): BillingAddressParametersDTO {
      val format = __pigeon_list[0] as String?
      val isPhoneNumberRequired = __pigeon_list[1] as Boolean?
      return BillingAddressParametersDTO(format, isPhoneNumberRequired)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      format,
      isPhoneNumberRequired,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CashAppPayConfigurationDTO (
  val cashAppPayEnvironment: CashAppPayEnvironment,
  val returnUrl: String

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): CashAppPayConfigurationDTO {
      val cashAppPayEnvironment = __pigeon_list[0] as CashAppPayEnvironment
      val returnUrl = __pigeon_list[1] as String
      return CashAppPayConfigurationDTO(cashAppPayEnvironment, returnUrl)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      cashAppPayEnvironment,
      returnUrl,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PaymentResultDTO (
  val type: PaymentResultEnum,
  val reason: String? = null,
  val result: PaymentResultModelDTO? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PaymentResultDTO {
      val type = __pigeon_list[0] as PaymentResultEnum
      val reason = __pigeon_list[1] as String?
      val result = __pigeon_list[2] as PaymentResultModelDTO?
      return PaymentResultDTO(type, reason, result)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      reason,
      result,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PaymentResultModelDTO (
  val sessionId: String? = null,
  val sessionData: String? = null,
  val sessionResult: String? = null,
  val resultCode: String? = null,
  val order: OrderResponseDTO? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PaymentResultModelDTO {
      val sessionId = __pigeon_list[0] as String?
      val sessionData = __pigeon_list[1] as String?
      val sessionResult = __pigeon_list[2] as String?
      val resultCode = __pigeon_list[3] as String?
      val order = __pigeon_list[4] as OrderResponseDTO?
      return PaymentResultModelDTO(sessionId, sessionData, sessionResult, resultCode, order)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      sessionId,
      sessionData,
      sessionResult,
      resultCode,
      order,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OrderResponseDTO (
  val pspReference: String,
  val orderData: String,
  val amount: AmountDTO? = null,
  val remainingAmount: AmountDTO? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): OrderResponseDTO {
      val pspReference = __pigeon_list[0] as String
      val orderData = __pigeon_list[1] as String
      val amount = __pigeon_list[2] as AmountDTO?
      val remainingAmount = __pigeon_list[3] as AmountDTO?
      return OrderResponseDTO(pspReference, orderData, amount, remainingAmount)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      pspReference,
      orderData,
      amount,
      remainingAmount,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CheckoutEvent (
  val type: CheckoutEventType,
  val data: Any? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): CheckoutEvent {
      val type = __pigeon_list[0] as CheckoutEventType
      val data = __pigeon_list[1]
      return CheckoutEvent(type, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      data,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ComponentCommunicationModel (
  val type: ComponentCommunicationType,
  val componentId: String,
  val data: Any? = null,
  val paymentResult: PaymentResultDTO? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ComponentCommunicationModel {
      val type = __pigeon_list[0] as ComponentCommunicationType
      val componentId = __pigeon_list[1] as String
      val data = __pigeon_list[2]
      val paymentResult = __pigeon_list[3] as PaymentResultDTO?
      return ComponentCommunicationModel(type, componentId, data, paymentResult)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      componentId,
      data,
      paymentResult,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PaymentEventDTO (
  val paymentEventType: PaymentEventType,
  val result: String? = null,
  val data: Map<String?, Any?>? = null,
  val error: ErrorDTO? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): PaymentEventDTO {
      val paymentEventType = __pigeon_list[0] as PaymentEventType
      val result = __pigeon_list[1] as String?
      val data = __pigeon_list[2] as Map<String?, Any?>?
      val error = __pigeon_list[3] as ErrorDTO?
      return PaymentEventDTO(paymentEventType, result, data, error)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      paymentEventType,
      result,
      data,
      error,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ErrorDTO (
  val errorMessage: String? = null,
  val reason: String? = null,
  val dismissDropIn: Boolean? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ErrorDTO {
      val errorMessage = __pigeon_list[0] as String?
      val reason = __pigeon_list[1] as String?
      val dismissDropIn = __pigeon_list[2] as Boolean?
      return ErrorDTO(errorMessage, reason, dismissDropIn)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      errorMessage,
      reason,
      dismissDropIn,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DeletedStoredPaymentMethodResultDTO (
  val storedPaymentMethodId: String,
  val isSuccessfullyRemoved: Boolean

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): DeletedStoredPaymentMethodResultDTO {
      val storedPaymentMethodId = __pigeon_list[0] as String
      val isSuccessfullyRemoved = __pigeon_list[1] as Boolean
      return DeletedStoredPaymentMethodResultDTO(storedPaymentMethodId, isSuccessfullyRemoved)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      storedPaymentMethodId,
      isSuccessfullyRemoved,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CardComponentConfigurationDTO (
  val environment: Environment,
  val clientKey: String,
  val countryCode: String,
  val amount: AmountDTO? = null,
  val shopperLocale: String? = null,
  val cardConfiguration: CardConfigurationDTO,
  val analyticsOptionsDTO: AnalyticsOptionsDTO

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): CardComponentConfigurationDTO {
      val environment = __pigeon_list[0] as Environment
      val clientKey = __pigeon_list[1] as String
      val countryCode = __pigeon_list[2] as String
      val amount = __pigeon_list[3] as AmountDTO?
      val shopperLocale = __pigeon_list[4] as String?
      val cardConfiguration = __pigeon_list[5] as CardConfigurationDTO
      val analyticsOptionsDTO = __pigeon_list[6] as AnalyticsOptionsDTO
      return CardComponentConfigurationDTO(environment, clientKey, countryCode, amount, shopperLocale, cardConfiguration, analyticsOptionsDTO)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      environment,
      clientKey,
      countryCode,
      amount,
      shopperLocale,
      cardConfiguration,
      analyticsOptionsDTO,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class InstantPaymentConfigurationDTO (
  val instantPaymentType: InstantPaymentType,
  val environment: Environment,
  val clientKey: String,
  val countryCode: String,
  val amount: AmountDTO? = null,
  val shopperLocale: String? = null,
  val analyticsOptionsDTO: AnalyticsOptionsDTO,
  val googlePayConfigurationDTO: GooglePayConfigurationDTO? = null,
  val applePayConfigurationDTO: ApplePayConfigurationDTO? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): InstantPaymentConfigurationDTO {
      val instantPaymentType = __pigeon_list[0] as InstantPaymentType
      val environment = __pigeon_list[1] as Environment
      val clientKey = __pigeon_list[2] as String
      val countryCode = __pigeon_list[3] as String
      val amount = __pigeon_list[4] as AmountDTO?
      val shopperLocale = __pigeon_list[5] as String?
      val analyticsOptionsDTO = __pigeon_list[6] as AnalyticsOptionsDTO
      val googlePayConfigurationDTO = __pigeon_list[7] as GooglePayConfigurationDTO?
      val applePayConfigurationDTO = __pigeon_list[8] as ApplePayConfigurationDTO?
      return InstantPaymentConfigurationDTO(instantPaymentType, environment, clientKey, countryCode, amount, shopperLocale, analyticsOptionsDTO, googlePayConfigurationDTO, applePayConfigurationDTO)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      instantPaymentType,
      environment,
      clientKey,
      countryCode,
      amount,
      shopperLocale,
      analyticsOptionsDTO,
      googlePayConfigurationDTO,
      applePayConfigurationDTO,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class InstantPaymentSetupResultDTO (
  val instantPaymentType: InstantPaymentType,
  val isSupported: Boolean,
  val resultData: Any? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): InstantPaymentSetupResultDTO {
      val instantPaymentType = __pigeon_list[0] as InstantPaymentType
      val isSupported = __pigeon_list[1] as Boolean
      val resultData = __pigeon_list[2]
      return InstantPaymentSetupResultDTO(instantPaymentType, isSupported, resultData)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      instantPaymentType,
      isSupported,
      resultData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UnencryptedCardDTO (
  val cardNumber: String? = null,
  val expiryMonth: String? = null,
  val expiryYear: String? = null,
  val cvc: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): UnencryptedCardDTO {
      val cardNumber = __pigeon_list[0] as String?
      val expiryMonth = __pigeon_list[1] as String?
      val expiryYear = __pigeon_list[2] as String?
      val cvc = __pigeon_list[3] as String?
      return UnencryptedCardDTO(cardNumber, expiryMonth, expiryYear, cvc)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      cardNumber,
      expiryMonth,
      expiryYear,
      cvc,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class EncryptedCardDTO (
  val encryptedCardNumber: String? = null,
  val encryptedExpiryMonth: String? = null,
  val encryptedExpiryYear: String? = null,
  val encryptedSecurityCode: String? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): EncryptedCardDTO {
      val encryptedCardNumber = __pigeon_list[0] as String?
      val encryptedExpiryMonth = __pigeon_list[1] as String?
      val encryptedExpiryYear = __pigeon_list[2] as String?
      val encryptedSecurityCode = __pigeon_list[3] as String?
      return EncryptedCardDTO(encryptedCardNumber, encryptedExpiryMonth, encryptedExpiryYear, encryptedSecurityCode)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      encryptedCardNumber,
      encryptedExpiryMonth,
      encryptedExpiryYear,
      encryptedSecurityCode,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ActionComponentConfigurationDTO (
  val environment: Environment,
  val clientKey: String,
  val shopperLocale: String? = null,
  val amount: AmountDTO? = null,
  val analyticsOptionsDTO: AnalyticsOptionsDTO

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): ActionComponentConfigurationDTO {
      val environment = __pigeon_list[0] as Environment
      val clientKey = __pigeon_list[1] as String
      val shopperLocale = __pigeon_list[2] as String?
      val amount = __pigeon_list[3] as AmountDTO?
      val analyticsOptionsDTO = __pigeon_list[4] as AnalyticsOptionsDTO
      return ActionComponentConfigurationDTO(environment, clientKey, shopperLocale, amount, analyticsOptionsDTO)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      environment,
      clientKey,
      shopperLocale,
      amount,
      analyticsOptionsDTO,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class OrderCancelResultDTO (
  val orderCancelResponseBody: Map<String?, Any?>,
  val updatedPaymentMethodsResponseBody: Map<String?, Any?>? = null

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): OrderCancelResultDTO {
      val orderCancelResponseBody = __pigeon_list[0] as Map<String?, Any?>
      val updatedPaymentMethodsResponseBody = __pigeon_list[1] as Map<String?, Any?>?
      return OrderCancelResultDTO(orderCancelResponseBody, updatedPaymentMethodsResponseBody)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      orderCancelResponseBody,
      updatedPaymentMethodsResponseBody,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BinLookupDataDTO (
  val brand: String

) {
  companion object {
    @Suppress("LocalVariableName")
    fun fromList(__pigeon_list: List<Any?>): BinLookupDataDTO {
      val brand = __pigeon_list[0] as String
      return BinLookupDataDTO(brand)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      brand,
    )
  }
}
private object PlatformApiPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          SessionDTO.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AmountDTO.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AnalyticsOptionsDTO.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DropInConfigurationDTO.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CardConfigurationDTO.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApplePayConfigurationDTO.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApplePayContactDTO.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApplePayShippingMethodDTO.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ApplePaySummaryItemDTO.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GooglePayConfigurationDTO.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MerchantInfoDTO.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ShippingAddressParametersDTO.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BillingAddressParametersDTO.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CashAppPayConfigurationDTO.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PaymentResultDTO.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PaymentResultModelDTO.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OrderResponseDTO.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CheckoutEvent.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ComponentCommunicationModel.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PaymentEventDTO.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ErrorDTO.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DeletedStoredPaymentMethodResultDTO.fromList(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CardComponentConfigurationDTO.fromList(it)
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InstantPaymentConfigurationDTO.fromList(it)
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          InstantPaymentSetupResultDTO.fromList(it)
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UnencryptedCardDTO.fromList(it)
        }
      }
      155.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          EncryptedCardDTO.fromList(it)
        }
      }
      156.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ActionComponentConfigurationDTO.fromList(it)
        }
      }
      157.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          OrderCancelResultDTO.fromList(it)
        }
      }
      158.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BinLookupDataDTO.fromList(it)
        }
      }
      159.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          Environment.ofRaw(it)
        }
      }
      160.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          AddressMode.ofRaw(it)
        }
      }
      161.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          CardAuthMethod.ofRaw(it)
        }
      }
      162.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          TotalPriceStatus.ofRaw(it)
        }
      }
      163.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          GooglePayEnvironment.ofRaw(it)
        }
      }
      164.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          CashAppPayEnvironment.ofRaw(it)
        }
      }
      165.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PaymentResultEnum.ofRaw(it)
        }
      }
      166.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          CheckoutEventType.ofRaw(it)
        }
      }
      167.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          ComponentCommunicationType.ofRaw(it)
        }
      }
      168.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          PaymentEventType.ofRaw(it)
        }
      }
      169.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          FieldVisibility.ofRaw(it)
        }
      }
      170.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          InstantPaymentType.ofRaw(it)
        }
      }
      171.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          ApplePayShippingType.ofRaw(it)
        }
      }
      172.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          ApplePayMerchantCapability.ofRaw(it)
        }
      }
      173.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          ApplePaySummaryItemType.ofRaw(it)
        }
      }
      174.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          CardNumberValidationResultDTO.ofRaw(it)
        }
      }
      175.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          CardExpiryDateValidationResultDTO.ofRaw(it)
        }
      }
      176.toByte() -> {
        return (readValue(buffer) as Int?)?.let {
          CardSecurityCodeValidationResultDTO.ofRaw(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is SessionDTO -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is AmountDTO -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is AnalyticsOptionsDTO -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is DropInConfigurationDTO -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is CardConfigurationDTO -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is ApplePayConfigurationDTO -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is ApplePayContactDTO -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is ApplePayShippingMethodDTO -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is ApplePaySummaryItemDTO -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is GooglePayConfigurationDTO -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is MerchantInfoDTO -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is ShippingAddressParametersDTO -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is BillingAddressParametersDTO -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is CashAppPayConfigurationDTO -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is PaymentResultDTO -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is PaymentResultModelDTO -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is OrderResponseDTO -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is CheckoutEvent -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is ComponentCommunicationModel -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is PaymentEventDTO -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is ErrorDTO -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is DeletedStoredPaymentMethodResultDTO -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      is CardComponentConfigurationDTO -> {
        stream.write(151)
        writeValue(stream, value.toList())
      }
      is InstantPaymentConfigurationDTO -> {
        stream.write(152)
        writeValue(stream, value.toList())
      }
      is InstantPaymentSetupResultDTO -> {
        stream.write(153)
        writeValue(stream, value.toList())
      }
      is UnencryptedCardDTO -> {
        stream.write(154)
        writeValue(stream, value.toList())
      }
      is EncryptedCardDTO -> {
        stream.write(155)
        writeValue(stream, value.toList())
      }
      is ActionComponentConfigurationDTO -> {
        stream.write(156)
        writeValue(stream, value.toList())
      }
      is OrderCancelResultDTO -> {
        stream.write(157)
        writeValue(stream, value.toList())
      }
      is BinLookupDataDTO -> {
        stream.write(158)
        writeValue(stream, value.toList())
      }
      is Environment -> {
        stream.write(159)
        writeValue(stream, value.raw)
      }
      is AddressMode -> {
        stream.write(160)
        writeValue(stream, value.raw)
      }
      is CardAuthMethod -> {
        stream.write(161)
        writeValue(stream, value.raw)
      }
      is TotalPriceStatus -> {
        stream.write(162)
        writeValue(stream, value.raw)
      }
      is GooglePayEnvironment -> {
        stream.write(163)
        writeValue(stream, value.raw)
      }
      is CashAppPayEnvironment -> {
        stream.write(164)
        writeValue(stream, value.raw)
      }
      is PaymentResultEnum -> {
        stream.write(165)
        writeValue(stream, value.raw)
      }
      is CheckoutEventType -> {
        stream.write(166)
        writeValue(stream, value.raw)
      }
      is ComponentCommunicationType -> {
        stream.write(167)
        writeValue(stream, value.raw)
      }
      is PaymentEventType -> {
        stream.write(168)
        writeValue(stream, value.raw)
      }
      is FieldVisibility -> {
        stream.write(169)
        writeValue(stream, value.raw)
      }
      is InstantPaymentType -> {
        stream.write(170)
        writeValue(stream, value.raw)
      }
      is ApplePayShippingType -> {
        stream.write(171)
        writeValue(stream, value.raw)
      }
      is ApplePayMerchantCapability -> {
        stream.write(172)
        writeValue(stream, value.raw)
      }
      is ApplePaySummaryItemType -> {
        stream.write(173)
        writeValue(stream, value.raw)
      }
      is CardNumberValidationResultDTO -> {
        stream.write(174)
        writeValue(stream, value.raw)
      }
      is CardExpiryDateValidationResultDTO -> {
        stream.write(175)
        writeValue(stream, value.raw)
      }
      is CardSecurityCodeValidationResultDTO -> {
        stream.write(176)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CheckoutPlatformInterface {
  fun getReturnUrl(callback: (Result<String>) -> Unit)
  fun createSession(sessionId: String, sessionData: String, configuration: Any?, callback: (Result<SessionDTO>) -> Unit)
  fun clearSession()
  fun encryptCard(unencryptedCardDTO: UnencryptedCardDTO, publicKey: String, callback: (Result<EncryptedCardDTO>) -> Unit)
  fun encryptBin(bin: String, publicKey: String, callback: (Result<String>) -> Unit)
  fun validateCardNumber(cardNumber: String, enableLuhnCheck: Boolean): CardNumberValidationResultDTO
  fun validateCardExpiryDate(expiryMonth: String, expiryYear: String): CardExpiryDateValidationResultDTO
  fun validateCardSecurityCode(securityCode: String, cardBrand: String?): CardSecurityCodeValidationResultDTO
  fun enableConsoleLogging(loggingEnabled: Boolean)

  companion object {
    /** The codec used by CheckoutPlatformInterface. */
    val codec: MessageCodec<Any?> by lazy {
      PlatformApiPigeonCodec
    }
    /** Sets up an instance of `CheckoutPlatformInterface` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CheckoutPlatformInterface?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.getReturnUrl$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getReturnUrl{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.createSession$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val sessionIdArg = args[0] as String
            val sessionDataArg = args[1] as String
            val configurationArg = args[2]
            api.createSession(sessionIdArg, sessionDataArg, configurationArg) { result: Result<SessionDTO> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.clearSession$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.clearSession()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.encryptCard$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val unencryptedCardDTOArg = args[0] as UnencryptedCardDTO
            val publicKeyArg = args[1] as String
            api.encryptCard(unencryptedCardDTOArg, publicKeyArg) { result: Result<EncryptedCardDTO> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.encryptBin$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val binArg = args[0] as String
            val publicKeyArg = args[1] as String
            api.encryptBin(binArg, publicKeyArg) { result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.validateCardNumber$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val cardNumberArg = args[0] as String
            val enableLuhnCheckArg = args[1] as Boolean
            val wrapped: List<Any?> = try {
              listOf(api.validateCardNumber(cardNumberArg, enableLuhnCheckArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.validateCardExpiryDate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val expiryMonthArg = args[0] as String
            val expiryYearArg = args[1] as String
            val wrapped: List<Any?> = try {
              listOf(api.validateCardExpiryDate(expiryMonthArg, expiryYearArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.validateCardSecurityCode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val securityCodeArg = args[0] as String
            val cardBrandArg = args[1] as String?
            val wrapped: List<Any?> = try {
              listOf(api.validateCardSecurityCode(securityCodeArg, cardBrandArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.enableConsoleLogging$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val loggingEnabledArg = args[0] as Boolean
            val wrapped: List<Any?> = try {
              api.enableConsoleLogging(loggingEnabledArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface DropInPlatformInterface {
  fun showDropInSession(dropInConfigurationDTO: DropInConfigurationDTO)
  fun showDropInAdvanced(dropInConfigurationDTO: DropInConfigurationDTO, paymentMethodsResponse: String)
  fun onPaymentsResult(paymentsResult: PaymentEventDTO)
  fun onPaymentsDetailsResult(paymentsDetailsResult: PaymentEventDTO)
  fun onDeleteStoredPaymentMethodResult(deleteStoredPaymentMethodResultDTO: DeletedStoredPaymentMethodResultDTO)
  fun onBalanceCheckResult(balanceCheckResponse: String)
  fun onOrderRequestResult(orderRequestResponse: String)
  fun onOrderCancelResult(orderCancelResult: OrderCancelResultDTO)
  fun cleanUpDropIn()

  companion object {
    /** The codec used by DropInPlatformInterface. */
    val codec: MessageCodec<Any?> by lazy {
      PlatformApiPigeonCodec
    }
    /** Sets up an instance of `DropInPlatformInterface` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: DropInPlatformInterface?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.showDropInSession$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dropInConfigurationDTOArg = args[0] as DropInConfigurationDTO
            val wrapped: List<Any?> = try {
              api.showDropInSession(dropInConfigurationDTOArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.showDropInAdvanced$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val dropInConfigurationDTOArg = args[0] as DropInConfigurationDTO
            val paymentMethodsResponseArg = args[1] as String
            val wrapped: List<Any?> = try {
              api.showDropInAdvanced(dropInConfigurationDTOArg, paymentMethodsResponseArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onPaymentsResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paymentsResultArg = args[0] as PaymentEventDTO
            val wrapped: List<Any?> = try {
              api.onPaymentsResult(paymentsResultArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onPaymentsDetailsResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val paymentsDetailsResultArg = args[0] as PaymentEventDTO
            val wrapped: List<Any?> = try {
              api.onPaymentsDetailsResult(paymentsDetailsResultArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onDeleteStoredPaymentMethodResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deleteStoredPaymentMethodResultDTOArg = args[0] as DeletedStoredPaymentMethodResultDTO
            val wrapped: List<Any?> = try {
              api.onDeleteStoredPaymentMethodResult(deleteStoredPaymentMethodResultDTOArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onBalanceCheckResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val balanceCheckResponseArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.onBalanceCheckResult(balanceCheckResponseArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onOrderRequestResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val orderRequestResponseArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.onOrderRequestResult(orderRequestResponseArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onOrderCancelResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val orderCancelResultArg = args[0] as OrderCancelResultDTO
            val wrapped: List<Any?> = try {
              api.onOrderCancelResult(orderCancelResultArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.cleanUpDropIn$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.cleanUpDropIn()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class CheckoutFlutterInterface(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by CheckoutFlutterInterface. */
    val codec: MessageCodec<Any?> by lazy {
      PlatformApiPigeonCodec
    }
  }
  fun send(eventArg: CheckoutEvent, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.adyen_checkout.CheckoutFlutterInterface.send$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(AdyenPigeonError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ComponentPlatformInterface {
  fun updateViewHeight(viewId: Long)
  fun onPaymentsResult(componentId: String, paymentsResult: PaymentEventDTO)
  fun onPaymentsDetailsResult(componentId: String, paymentsDetailsResult: PaymentEventDTO)
  fun isInstantPaymentSupportedByPlatform(instantPaymentConfigurationDTO: InstantPaymentConfigurationDTO, paymentMethodResponse: String, componentId: String, callback: (Result<InstantPaymentSetupResultDTO>) -> Unit)
  fun onInstantPaymentPressed(instantPaymentConfigurationDTO: InstantPaymentConfigurationDTO, encodedPaymentMethod: String, componentId: String)
  fun handleAction(actionComponentConfiguration: ActionComponentConfigurationDTO, componentId: String, actionResponse: Map<String?, Any?>?)
  fun onDispose(componentId: String)

  companion object {
    /** The codec used by ComponentPlatformInterface. */
    val codec: MessageCodec<Any?> by lazy {
      PlatformApiPigeonCodec
    }
    /** Sets up an instance of `ComponentPlatformInterface` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: ComponentPlatformInterface?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.updateViewHeight$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val viewIdArg = args[0].let { num -> if (num is Int) num.toLong() else num as Long }
            val wrapped: List<Any?> = try {
              api.updateViewHeight(viewIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onPaymentsResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val componentIdArg = args[0] as String
            val paymentsResultArg = args[1] as PaymentEventDTO
            val wrapped: List<Any?> = try {
              api.onPaymentsResult(componentIdArg, paymentsResultArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onPaymentsDetailsResult$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val componentIdArg = args[0] as String
            val paymentsDetailsResultArg = args[1] as PaymentEventDTO
            val wrapped: List<Any?> = try {
              api.onPaymentsDetailsResult(componentIdArg, paymentsDetailsResultArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.isInstantPaymentSupportedByPlatform$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val instantPaymentConfigurationDTOArg = args[0] as InstantPaymentConfigurationDTO
            val paymentMethodResponseArg = args[1] as String
            val componentIdArg = args[2] as String
            api.isInstantPaymentSupportedByPlatform(instantPaymentConfigurationDTOArg, paymentMethodResponseArg, componentIdArg) { result: Result<InstantPaymentSetupResultDTO> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onInstantPaymentPressed$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val instantPaymentConfigurationDTOArg = args[0] as InstantPaymentConfigurationDTO
            val encodedPaymentMethodArg = args[1] as String
            val componentIdArg = args[2] as String
            val wrapped: List<Any?> = try {
              api.onInstantPaymentPressed(instantPaymentConfigurationDTOArg, encodedPaymentMethodArg, componentIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.handleAction$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val actionComponentConfigurationArg = args[0] as ActionComponentConfigurationDTO
            val componentIdArg = args[1] as String
            val actionResponseArg = args[2] as Map<String?, Any?>?
            val wrapped: List<Any?> = try {
              api.handleAction(actionComponentConfigurationArg, componentIdArg, actionResponseArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onDispose$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val componentIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.onDispose(componentIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class ComponentFlutterInterface(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by ComponentFlutterInterface. */
    val codec: MessageCodec<Any?> by lazy {
      PlatformApiPigeonCodec
    }
  }
  fun _generateCodecForDTOs(cardComponentConfigurationDTOArg: CardComponentConfigurationDTO, sessionDTOArg: SessionDTO, binLookupDataDTOArg: BinLookupDataDTO, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface._generateCodecForDTOs$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(cardComponentConfigurationDTOArg, sessionDTOArg, binLookupDataDTOArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(AdyenPigeonError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onComponentCommunication(componentCommunicationModelArg: ComponentCommunicationModel, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface.onComponentCommunication$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(componentCommunicationModelArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(AdyenPigeonError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
