// Autogenerated from Pigeon (v21.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum Environment {
  test,
  europe,
  unitedStates,
  australia,
  india,
  apse,
}

enum AddressMode {
  full,
  postalCode,
  none,
}

enum CardAuthMethod {
  panOnly,
  cryptogram3DS,
}

enum TotalPriceStatus {
  notCurrentlyKnown,
  estimated,
  finalPrice,
}

enum GooglePayEnvironment {
  test,
  production,
}

enum CashAppPayEnvironment {
  sandbox,
  production,
}

enum PaymentResultEnum {
  cancelledByUser,
  error,
  finished,
}

enum CheckoutEventType {
  submit,
  additionalDetails,
  result,
  deleteStoredPaymentMethod,
  balanceCheck,
  requestOrder,
  cancelOrder,
  binLookup,
  binValue,
}

enum ComponentCommunicationType {
  onSubmit,
  additionalDetails,
  loading,
  result,
  resize,
  binLookup,
  binValue,
}

enum PaymentEventType {
  finished,
  action,
  error,
  update,
}

enum FieldVisibility {
  show,
  hide,
}

enum InstantPaymentType {
  googlePay,
  applePay,
  instant,
}

enum ApplePayShippingType {
  shipping,
  delivery,
  storePickup,
  servicePickup,
}

enum ApplePayMerchantCapability {
  debit,
  credit,
}

enum ApplePaySummaryItemType {
  pending,
  definite,
}

enum CardNumberValidationResultDTO {
  valid,
  invalidIllegalCharacters,
  invalidLuhnCheck,
  invalidTooShort,
  invalidTooLong,
  invalidOtherReason,
}

enum CardExpiryDateValidationResultDTO {
  valid,
  invalidTooFarInTheFuture,
  invalidTooOld,
  nonParseableDate,
  invalidOtherReason,
}

enum CardSecurityCodeValidationResultDTO {
  valid,
  invalid,
}

class SessionDTO {
  SessionDTO({
    required this.id,
    required this.sessionData,
    required this.paymentMethodsJson,
  });

  String id;

  String sessionData;

  String paymentMethodsJson;

  Object encode() {
    return <Object?>[
      id,
      sessionData,
      paymentMethodsJson,
    ];
  }

  static SessionDTO decode(Object result) {
    result as List<Object?>;
    return SessionDTO(
      id: result[0]! as String,
      sessionData: result[1]! as String,
      paymentMethodsJson: result[2]! as String,
    );
  }
}

class AmountDTO {
  AmountDTO({
    required this.currency,
    required this.value,
  });

  String currency;

  int value;

  Object encode() {
    return <Object?>[
      currency,
      value,
    ];
  }

  static AmountDTO decode(Object result) {
    result as List<Object?>;
    return AmountDTO(
      currency: result[0]! as String,
      value: result[1]! as int,
    );
  }
}

class AnalyticsOptionsDTO {
  AnalyticsOptionsDTO({
    required this.enabled,
    required this.version,
  });

  bool enabled;

  String version;

  Object encode() {
    return <Object?>[
      enabled,
      version,
    ];
  }

  static AnalyticsOptionsDTO decode(Object result) {
    result as List<Object?>;
    return AnalyticsOptionsDTO(
      enabled: result[0]! as bool,
      version: result[1]! as String,
    );
  }
}

class DropInConfigurationDTO {
  DropInConfigurationDTO({
    required this.environment,
    required this.clientKey,
    required this.countryCode,
    this.amount,
    this.shopperLocale,
    this.cardConfigurationDTO,
    this.applePayConfigurationDTO,
    this.googlePayConfigurationDTO,
    this.cashAppPayConfigurationDTO,
    required this.analyticsOptionsDTO,
    required this.showPreselectedStoredPaymentMethod,
    required this.skipListWhenSinglePaymentMethod,
    required this.isRemoveStoredPaymentMethodEnabled,
    this.preselectedPaymentMethodTitle,
    this.paymentMethodNames,
    required this.isPartialPaymentSupported,
  });

  Environment environment;

  String clientKey;

  String countryCode;

  AmountDTO? amount;

  String? shopperLocale;

  CardConfigurationDTO? cardConfigurationDTO;

  ApplePayConfigurationDTO? applePayConfigurationDTO;

  GooglePayConfigurationDTO? googlePayConfigurationDTO;

  CashAppPayConfigurationDTO? cashAppPayConfigurationDTO;

  AnalyticsOptionsDTO analyticsOptionsDTO;

  bool showPreselectedStoredPaymentMethod;

  bool skipListWhenSinglePaymentMethod;

  bool isRemoveStoredPaymentMethodEnabled;

  String? preselectedPaymentMethodTitle;

  Map<String?, String?>? paymentMethodNames;

  bool isPartialPaymentSupported;

  Object encode() {
    return <Object?>[
      environment,
      clientKey,
      countryCode,
      amount,
      shopperLocale,
      cardConfigurationDTO,
      applePayConfigurationDTO,
      googlePayConfigurationDTO,
      cashAppPayConfigurationDTO,
      analyticsOptionsDTO,
      showPreselectedStoredPaymentMethod,
      skipListWhenSinglePaymentMethod,
      isRemoveStoredPaymentMethodEnabled,
      preselectedPaymentMethodTitle,
      paymentMethodNames,
      isPartialPaymentSupported,
    ];
  }

  static DropInConfigurationDTO decode(Object result) {
    result as List<Object?>;
    return DropInConfigurationDTO(
      environment: result[0]! as Environment,
      clientKey: result[1]! as String,
      countryCode: result[2]! as String,
      amount: result[3] as AmountDTO?,
      shopperLocale: result[4] as String?,
      cardConfigurationDTO: result[5] as CardConfigurationDTO?,
      applePayConfigurationDTO: result[6] as ApplePayConfigurationDTO?,
      googlePayConfigurationDTO: result[7] as GooglePayConfigurationDTO?,
      cashAppPayConfigurationDTO: result[8] as CashAppPayConfigurationDTO?,
      analyticsOptionsDTO: result[9]! as AnalyticsOptionsDTO,
      showPreselectedStoredPaymentMethod: result[10]! as bool,
      skipListWhenSinglePaymentMethod: result[11]! as bool,
      isRemoveStoredPaymentMethodEnabled: result[12]! as bool,
      preselectedPaymentMethodTitle: result[13] as String?,
      paymentMethodNames:
          (result[14] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      isPartialPaymentSupported: result[15]! as bool,
    );
  }
}

class CardConfigurationDTO {
  CardConfigurationDTO({
    required this.holderNameRequired,
    required this.addressMode,
    required this.showStorePaymentField,
    required this.showCvcForStoredCard,
    required this.showCvc,
    required this.kcpFieldVisibility,
    required this.socialSecurityNumberFieldVisibility,
    required this.supportedCardTypes,
  });

  bool holderNameRequired;

  AddressMode addressMode;

  bool showStorePaymentField;

  bool showCvcForStoredCard;

  bool showCvc;

  FieldVisibility kcpFieldVisibility;

  FieldVisibility socialSecurityNumberFieldVisibility;

  List<String?> supportedCardTypes;

  Object encode() {
    return <Object?>[
      holderNameRequired,
      addressMode,
      showStorePaymentField,
      showCvcForStoredCard,
      showCvc,
      kcpFieldVisibility,
      socialSecurityNumberFieldVisibility,
      supportedCardTypes,
    ];
  }

  static CardConfigurationDTO decode(Object result) {
    result as List<Object?>;
    return CardConfigurationDTO(
      holderNameRequired: result[0]! as bool,
      addressMode: result[1]! as AddressMode,
      showStorePaymentField: result[2]! as bool,
      showCvcForStoredCard: result[3]! as bool,
      showCvc: result[4]! as bool,
      kcpFieldVisibility: result[5]! as FieldVisibility,
      socialSecurityNumberFieldVisibility: result[6]! as FieldVisibility,
      supportedCardTypes: (result[7] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class ApplePayConfigurationDTO {
  ApplePayConfigurationDTO({
    required this.merchantId,
    required this.merchantName,
    this.allowOnboarding,
    this.summaryItems,
    this.requiredBillingContactFields,
    this.billingContact,
    this.requiredShippingContactFields,
    this.shippingContact,
    this.applePayShippingType,
    this.allowShippingContactEditing,
    this.shippingMethods,
    this.applicationData,
    this.supportedCountries,
    this.merchantCapability,
  });

  String merchantId;

  String merchantName;

  bool? allowOnboarding;

  List<ApplePaySummaryItemDTO?>? summaryItems;

  List<String?>? requiredBillingContactFields;

  ApplePayContactDTO? billingContact;

  List<String?>? requiredShippingContactFields;

  ApplePayContactDTO? shippingContact;

  ApplePayShippingType? applePayShippingType;

  bool? allowShippingContactEditing;

  List<ApplePayShippingMethodDTO?>? shippingMethods;

  String? applicationData;

  List<String?>? supportedCountries;

  ApplePayMerchantCapability? merchantCapability;

  Object encode() {
    return <Object?>[
      merchantId,
      merchantName,
      allowOnboarding,
      summaryItems,
      requiredBillingContactFields,
      billingContact,
      requiredShippingContactFields,
      shippingContact,
      applePayShippingType,
      allowShippingContactEditing,
      shippingMethods,
      applicationData,
      supportedCountries,
      merchantCapability,
    ];
  }

  static ApplePayConfigurationDTO decode(Object result) {
    result as List<Object?>;
    return ApplePayConfigurationDTO(
      merchantId: result[0]! as String,
      merchantName: result[1]! as String,
      allowOnboarding: result[2] as bool?,
      summaryItems:
          (result[3] as List<Object?>?)?.cast<ApplePaySummaryItemDTO?>(),
      requiredBillingContactFields:
          (result[4] as List<Object?>?)?.cast<String?>(),
      billingContact: result[5] as ApplePayContactDTO?,
      requiredShippingContactFields:
          (result[6] as List<Object?>?)?.cast<String?>(),
      shippingContact: result[7] as ApplePayContactDTO?,
      applePayShippingType: result[8] as ApplePayShippingType?,
      allowShippingContactEditing: result[9] as bool?,
      shippingMethods:
          (result[10] as List<Object?>?)?.cast<ApplePayShippingMethodDTO?>(),
      applicationData: result[11] as String?,
      supportedCountries: (result[12] as List<Object?>?)?.cast<String?>(),
      merchantCapability: result[13] as ApplePayMerchantCapability?,
    );
  }
}

class ApplePayContactDTO {
  ApplePayContactDTO({
    this.phoneNumber,
    this.emailAddress,
    this.givenName,
    this.familyName,
    this.phoneticGivenName,
    this.phoneticFamilyName,
    this.addressLines,
    this.subLocality,
    this.city,
    this.postalCode,
    this.subAdministrativeArea,
    this.administrativeArea,
    this.country,
    this.countryCode,
  });

  String? phoneNumber;

  String? emailAddress;

  String? givenName;

  String? familyName;

  String? phoneticGivenName;

  String? phoneticFamilyName;

  List<String?>? addressLines;

  String? subLocality;

  String? city;

  String? postalCode;

  String? subAdministrativeArea;

  String? administrativeArea;

  String? country;

  String? countryCode;

  Object encode() {
    return <Object?>[
      phoneNumber,
      emailAddress,
      givenName,
      familyName,
      phoneticGivenName,
      phoneticFamilyName,
      addressLines,
      subLocality,
      city,
      postalCode,
      subAdministrativeArea,
      administrativeArea,
      country,
      countryCode,
    ];
  }

  static ApplePayContactDTO decode(Object result) {
    result as List<Object?>;
    return ApplePayContactDTO(
      phoneNumber: result[0] as String?,
      emailAddress: result[1] as String?,
      givenName: result[2] as String?,
      familyName: result[3] as String?,
      phoneticGivenName: result[4] as String?,
      phoneticFamilyName: result[5] as String?,
      addressLines: (result[6] as List<Object?>?)?.cast<String?>(),
      subLocality: result[7] as String?,
      city: result[8] as String?,
      postalCode: result[9] as String?,
      subAdministrativeArea: result[10] as String?,
      administrativeArea: result[11] as String?,
      country: result[12] as String?,
      countryCode: result[13] as String?,
    );
  }
}

class ApplePayShippingMethodDTO {
  ApplePayShippingMethodDTO({
    required this.label,
    required this.detail,
    required this.amount,
    required this.identifier,
    this.startDate,
    this.endDate,
  });

  String label;

  String detail;

  AmountDTO amount;

  String identifier;

  String? startDate;

  String? endDate;

  Object encode() {
    return <Object?>[
      label,
      detail,
      amount,
      identifier,
      startDate,
      endDate,
    ];
  }

  static ApplePayShippingMethodDTO decode(Object result) {
    result as List<Object?>;
    return ApplePayShippingMethodDTO(
      label: result[0]! as String,
      detail: result[1]! as String,
      amount: result[2]! as AmountDTO,
      identifier: result[3]! as String,
      startDate: result[4] as String?,
      endDate: result[5] as String?,
    );
  }
}

class ApplePaySummaryItemDTO {
  ApplePaySummaryItemDTO({
    required this.label,
    required this.amount,
    required this.type,
  });

  String label;

  AmountDTO amount;

  ApplePaySummaryItemType type;

  Object encode() {
    return <Object?>[
      label,
      amount,
      type,
    ];
  }

  static ApplePaySummaryItemDTO decode(Object result) {
    result as List<Object?>;
    return ApplePaySummaryItemDTO(
      label: result[0]! as String,
      amount: result[1]! as AmountDTO,
      type: result[2]! as ApplePaySummaryItemType,
    );
  }
}

class GooglePayConfigurationDTO {
  GooglePayConfigurationDTO({
    required this.googlePayEnvironment,
    this.merchantAccount,
    this.merchantInfoDTO,
    this.totalPriceStatus,
    this.allowedCardNetworks,
    this.allowedAuthMethods,
    this.allowPrepaidCards,
    this.allowCreditCards,
    this.assuranceDetailsRequired,
    this.emailRequired,
    this.existingPaymentMethodRequired,
    this.shippingAddressRequired,
    this.shippingAddressParametersDTO,
    this.billingAddressRequired,
    this.billingAddressParametersDTO,
  });

  GooglePayEnvironment googlePayEnvironment;

  String? merchantAccount;

  MerchantInfoDTO? merchantInfoDTO;

  TotalPriceStatus? totalPriceStatus;

  List<String?>? allowedCardNetworks;

  List<String?>? allowedAuthMethods;

  bool? allowPrepaidCards;

  bool? allowCreditCards;

  bool? assuranceDetailsRequired;

  bool? emailRequired;

  bool? existingPaymentMethodRequired;

  bool? shippingAddressRequired;

  ShippingAddressParametersDTO? shippingAddressParametersDTO;

  bool? billingAddressRequired;

  BillingAddressParametersDTO? billingAddressParametersDTO;

  Object encode() {
    return <Object?>[
      googlePayEnvironment,
      merchantAccount,
      merchantInfoDTO,
      totalPriceStatus,
      allowedCardNetworks,
      allowedAuthMethods,
      allowPrepaidCards,
      allowCreditCards,
      assuranceDetailsRequired,
      emailRequired,
      existingPaymentMethodRequired,
      shippingAddressRequired,
      shippingAddressParametersDTO,
      billingAddressRequired,
      billingAddressParametersDTO,
    ];
  }

  static GooglePayConfigurationDTO decode(Object result) {
    result as List<Object?>;
    return GooglePayConfigurationDTO(
      googlePayEnvironment: result[0]! as GooglePayEnvironment,
      merchantAccount: result[1] as String?,
      merchantInfoDTO: result[2] as MerchantInfoDTO?,
      totalPriceStatus: result[3] as TotalPriceStatus?,
      allowedCardNetworks: (result[4] as List<Object?>?)?.cast<String?>(),
      allowedAuthMethods: (result[5] as List<Object?>?)?.cast<String?>(),
      allowPrepaidCards: result[6] as bool?,
      allowCreditCards: result[7] as bool?,
      assuranceDetailsRequired: result[8] as bool?,
      emailRequired: result[9] as bool?,
      existingPaymentMethodRequired: result[10] as bool?,
      shippingAddressRequired: result[11] as bool?,
      shippingAddressParametersDTO: result[12] as ShippingAddressParametersDTO?,
      billingAddressRequired: result[13] as bool?,
      billingAddressParametersDTO: result[14] as BillingAddressParametersDTO?,
    );
  }
}

class MerchantInfoDTO {
  MerchantInfoDTO({
    this.merchantName,
    this.merchantId,
  });

  String? merchantName;

  String? merchantId;

  Object encode() {
    return <Object?>[
      merchantName,
      merchantId,
    ];
  }

  static MerchantInfoDTO decode(Object result) {
    result as List<Object?>;
    return MerchantInfoDTO(
      merchantName: result[0] as String?,
      merchantId: result[1] as String?,
    );
  }
}

class ShippingAddressParametersDTO {
  ShippingAddressParametersDTO({
    this.allowedCountryCodes,
    this.isPhoneNumberRequired,
  });

  List<String?>? allowedCountryCodes;

  bool? isPhoneNumberRequired;

  Object encode() {
    return <Object?>[
      allowedCountryCodes,
      isPhoneNumberRequired,
    ];
  }

  static ShippingAddressParametersDTO decode(Object result) {
    result as List<Object?>;
    return ShippingAddressParametersDTO(
      allowedCountryCodes: (result[0] as List<Object?>?)?.cast<String?>(),
      isPhoneNumberRequired: result[1] as bool?,
    );
  }
}

class BillingAddressParametersDTO {
  BillingAddressParametersDTO({
    this.format,
    this.isPhoneNumberRequired,
  });

  String? format;

  bool? isPhoneNumberRequired;

  Object encode() {
    return <Object?>[
      format,
      isPhoneNumberRequired,
    ];
  }

  static BillingAddressParametersDTO decode(Object result) {
    result as List<Object?>;
    return BillingAddressParametersDTO(
      format: result[0] as String?,
      isPhoneNumberRequired: result[1] as bool?,
    );
  }
}

class CashAppPayConfigurationDTO {
  CashAppPayConfigurationDTO({
    required this.cashAppPayEnvironment,
    required this.returnUrl,
  });

  CashAppPayEnvironment cashAppPayEnvironment;

  String returnUrl;

  Object encode() {
    return <Object?>[
      cashAppPayEnvironment,
      returnUrl,
    ];
  }

  static CashAppPayConfigurationDTO decode(Object result) {
    result as List<Object?>;
    return CashAppPayConfigurationDTO(
      cashAppPayEnvironment: result[0]! as CashAppPayEnvironment,
      returnUrl: result[1]! as String,
    );
  }
}

class PaymentResultDTO {
  PaymentResultDTO({
    required this.type,
    this.reason,
    this.result,
  });

  PaymentResultEnum type;

  String? reason;

  PaymentResultModelDTO? result;

  Object encode() {
    return <Object?>[
      type,
      reason,
      result,
    ];
  }

  static PaymentResultDTO decode(Object result) {
    result as List<Object?>;
    return PaymentResultDTO(
      type: result[0]! as PaymentResultEnum,
      reason: result[1] as String?,
      result: result[2] as PaymentResultModelDTO?,
    );
  }
}

class PaymentResultModelDTO {
  PaymentResultModelDTO({
    this.sessionId,
    this.sessionData,
    this.sessionResult,
    this.resultCode,
    this.order,
  });

  String? sessionId;

  String? sessionData;

  String? sessionResult;

  String? resultCode;

  OrderResponseDTO? order;

  Object encode() {
    return <Object?>[
      sessionId,
      sessionData,
      sessionResult,
      resultCode,
      order,
    ];
  }

  static PaymentResultModelDTO decode(Object result) {
    result as List<Object?>;
    return PaymentResultModelDTO(
      sessionId: result[0] as String?,
      sessionData: result[1] as String?,
      sessionResult: result[2] as String?,
      resultCode: result[3] as String?,
      order: result[4] as OrderResponseDTO?,
    );
  }
}

class OrderResponseDTO {
  OrderResponseDTO({
    required this.pspReference,
    required this.orderData,
    this.amount,
    this.remainingAmount,
  });

  String pspReference;

  String orderData;

  AmountDTO? amount;

  AmountDTO? remainingAmount;

  Object encode() {
    return <Object?>[
      pspReference,
      orderData,
      amount,
      remainingAmount,
    ];
  }

  static OrderResponseDTO decode(Object result) {
    result as List<Object?>;
    return OrderResponseDTO(
      pspReference: result[0]! as String,
      orderData: result[1]! as String,
      amount: result[2] as AmountDTO?,
      remainingAmount: result[3] as AmountDTO?,
    );
  }
}

class CheckoutEvent {
  CheckoutEvent({
    required this.type,
    this.data,
  });

  CheckoutEventType type;

  Object? data;

  Object encode() {
    return <Object?>[
      type,
      data,
    ];
  }

  static CheckoutEvent decode(Object result) {
    result as List<Object?>;
    return CheckoutEvent(
      type: result[0]! as CheckoutEventType,
      data: result[1],
    );
  }
}

class ComponentCommunicationModel {
  ComponentCommunicationModel({
    required this.type,
    required this.componentId,
    this.data,
    this.paymentResult,
  });

  ComponentCommunicationType type;

  String componentId;

  Object? data;

  PaymentResultDTO? paymentResult;

  Object encode() {
    return <Object?>[
      type,
      componentId,
      data,
      paymentResult,
    ];
  }

  static ComponentCommunicationModel decode(Object result) {
    result as List<Object?>;
    return ComponentCommunicationModel(
      type: result[0]! as ComponentCommunicationType,
      componentId: result[1]! as String,
      data: result[2],
      paymentResult: result[3] as PaymentResultDTO?,
    );
  }
}

class PaymentEventDTO {
  PaymentEventDTO({
    required this.paymentEventType,
    this.result,
    this.data,
    this.error,
  });

  PaymentEventType paymentEventType;

  String? result;

  Map<String?, Object?>? data;

  ErrorDTO? error;

  Object encode() {
    return <Object?>[
      paymentEventType,
      result,
      data,
      error,
    ];
  }

  static PaymentEventDTO decode(Object result) {
    result as List<Object?>;
    return PaymentEventDTO(
      paymentEventType: result[0]! as PaymentEventType,
      result: result[1] as String?,
      data: (result[2] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
      error: result[3] as ErrorDTO?,
    );
  }
}

class ErrorDTO {
  ErrorDTO({
    this.errorMessage,
    this.reason,
    this.dismissDropIn,
  });

  String? errorMessage;

  String? reason;

  bool? dismissDropIn;

  Object encode() {
    return <Object?>[
      errorMessage,
      reason,
      dismissDropIn,
    ];
  }

  static ErrorDTO decode(Object result) {
    result as List<Object?>;
    return ErrorDTO(
      errorMessage: result[0] as String?,
      reason: result[1] as String?,
      dismissDropIn: result[2] as bool?,
    );
  }
}

class DeletedStoredPaymentMethodResultDTO {
  DeletedStoredPaymentMethodResultDTO({
    required this.storedPaymentMethodId,
    required this.isSuccessfullyRemoved,
  });

  String storedPaymentMethodId;

  bool isSuccessfullyRemoved;

  Object encode() {
    return <Object?>[
      storedPaymentMethodId,
      isSuccessfullyRemoved,
    ];
  }

  static DeletedStoredPaymentMethodResultDTO decode(Object result) {
    result as List<Object?>;
    return DeletedStoredPaymentMethodResultDTO(
      storedPaymentMethodId: result[0]! as String,
      isSuccessfullyRemoved: result[1]! as bool,
    );
  }
}

class CardComponentConfigurationDTO {
  CardComponentConfigurationDTO({
    required this.environment,
    required this.clientKey,
    required this.countryCode,
    this.amount,
    this.shopperLocale,
    required this.cardConfiguration,
    required this.analyticsOptionsDTO,
  });

  Environment environment;

  String clientKey;

  String countryCode;

  AmountDTO? amount;

  String? shopperLocale;

  CardConfigurationDTO cardConfiguration;

  AnalyticsOptionsDTO analyticsOptionsDTO;

  Object encode() {
    return <Object?>[
      environment,
      clientKey,
      countryCode,
      amount,
      shopperLocale,
      cardConfiguration,
      analyticsOptionsDTO,
    ];
  }

  static CardComponentConfigurationDTO decode(Object result) {
    result as List<Object?>;
    return CardComponentConfigurationDTO(
      environment: result[0]! as Environment,
      clientKey: result[1]! as String,
      countryCode: result[2]! as String,
      amount: result[3] as AmountDTO?,
      shopperLocale: result[4] as String?,
      cardConfiguration: result[5]! as CardConfigurationDTO,
      analyticsOptionsDTO: result[6]! as AnalyticsOptionsDTO,
    );
  }
}

class InstantPaymentConfigurationDTO {
  InstantPaymentConfigurationDTO({
    required this.instantPaymentType,
    required this.environment,
    required this.clientKey,
    required this.countryCode,
    this.amount,
    this.shopperLocale,
    required this.analyticsOptionsDTO,
    this.googlePayConfigurationDTO,
    this.applePayConfigurationDTO,
  });

  InstantPaymentType instantPaymentType;

  Environment environment;

  String clientKey;

  String countryCode;

  AmountDTO? amount;

  String? shopperLocale;

  AnalyticsOptionsDTO analyticsOptionsDTO;

  GooglePayConfigurationDTO? googlePayConfigurationDTO;

  ApplePayConfigurationDTO? applePayConfigurationDTO;

  Object encode() {
    return <Object?>[
      instantPaymentType,
      environment,
      clientKey,
      countryCode,
      amount,
      shopperLocale,
      analyticsOptionsDTO,
      googlePayConfigurationDTO,
      applePayConfigurationDTO,
    ];
  }

  static InstantPaymentConfigurationDTO decode(Object result) {
    result as List<Object?>;
    return InstantPaymentConfigurationDTO(
      instantPaymentType: result[0]! as InstantPaymentType,
      environment: result[1]! as Environment,
      clientKey: result[2]! as String,
      countryCode: result[3]! as String,
      amount: result[4] as AmountDTO?,
      shopperLocale: result[5] as String?,
      analyticsOptionsDTO: result[6]! as AnalyticsOptionsDTO,
      googlePayConfigurationDTO: result[7] as GooglePayConfigurationDTO?,
      applePayConfigurationDTO: result[8] as ApplePayConfigurationDTO?,
    );
  }
}

class InstantPaymentSetupResultDTO {
  InstantPaymentSetupResultDTO({
    required this.instantPaymentType,
    required this.isSupported,
    this.resultData,
  });

  InstantPaymentType instantPaymentType;

  bool isSupported;

  Object? resultData;

  Object encode() {
    return <Object?>[
      instantPaymentType,
      isSupported,
      resultData,
    ];
  }

  static InstantPaymentSetupResultDTO decode(Object result) {
    result as List<Object?>;
    return InstantPaymentSetupResultDTO(
      instantPaymentType: result[0]! as InstantPaymentType,
      isSupported: result[1]! as bool,
      resultData: result[2],
    );
  }
}

class UnencryptedCardDTO {
  UnencryptedCardDTO({
    this.cardNumber,
    this.expiryMonth,
    this.expiryYear,
    this.cvc,
  });

  String? cardNumber;

  String? expiryMonth;

  String? expiryYear;

  String? cvc;

  Object encode() {
    return <Object?>[
      cardNumber,
      expiryMonth,
      expiryYear,
      cvc,
    ];
  }

  static UnencryptedCardDTO decode(Object result) {
    result as List<Object?>;
    return UnencryptedCardDTO(
      cardNumber: result[0] as String?,
      expiryMonth: result[1] as String?,
      expiryYear: result[2] as String?,
      cvc: result[3] as String?,
    );
  }
}

class EncryptedCardDTO {
  EncryptedCardDTO({
    this.encryptedCardNumber,
    this.encryptedExpiryMonth,
    this.encryptedExpiryYear,
    this.encryptedSecurityCode,
  });

  String? encryptedCardNumber;

  String? encryptedExpiryMonth;

  String? encryptedExpiryYear;

  String? encryptedSecurityCode;

  Object encode() {
    return <Object?>[
      encryptedCardNumber,
      encryptedExpiryMonth,
      encryptedExpiryYear,
      encryptedSecurityCode,
    ];
  }

  static EncryptedCardDTO decode(Object result) {
    result as List<Object?>;
    return EncryptedCardDTO(
      encryptedCardNumber: result[0] as String?,
      encryptedExpiryMonth: result[1] as String?,
      encryptedExpiryYear: result[2] as String?,
      encryptedSecurityCode: result[3] as String?,
    );
  }
}

class ActionComponentConfigurationDTO {
  ActionComponentConfigurationDTO({
    required this.environment,
    required this.clientKey,
    this.shopperLocale,
    this.amount,
    required this.analyticsOptionsDTO,
  });

  Environment environment;

  String clientKey;

  String? shopperLocale;

  AmountDTO? amount;

  AnalyticsOptionsDTO analyticsOptionsDTO;

  Object encode() {
    return <Object?>[
      environment,
      clientKey,
      shopperLocale,
      amount,
      analyticsOptionsDTO,
    ];
  }

  static ActionComponentConfigurationDTO decode(Object result) {
    result as List<Object?>;
    return ActionComponentConfigurationDTO(
      environment: result[0]! as Environment,
      clientKey: result[1]! as String,
      shopperLocale: result[2] as String?,
      amount: result[3] as AmountDTO?,
      analyticsOptionsDTO: result[4]! as AnalyticsOptionsDTO,
    );
  }
}

class OrderCancelResultDTO {
  OrderCancelResultDTO({
    required this.orderCancelResponseBody,
    this.updatedPaymentMethodsResponseBody,
  });

  Map<String?, Object?> orderCancelResponseBody;

  Map<String?, Object?>? updatedPaymentMethodsResponseBody;

  Object encode() {
    return <Object?>[
      orderCancelResponseBody,
      updatedPaymentMethodsResponseBody,
    ];
  }

  static OrderCancelResultDTO decode(Object result) {
    result as List<Object?>;
    return OrderCancelResultDTO(
      orderCancelResponseBody:
          (result[0] as Map<Object?, Object?>?)!.cast<String?, Object?>(),
      updatedPaymentMethodsResponseBody:
          (result[1] as Map<Object?, Object?>?)?.cast<String?, Object?>(),
    );
  }
}

class BinLookupDataDTO {
  BinLookupDataDTO({
    required this.brand,
  });

  String brand;

  Object encode() {
    return <Object?>[
      brand,
    ];
  }

  static BinLookupDataDTO decode(Object result) {
    result as List<Object?>;
    return BinLookupDataDTO(
      brand: result[0]! as String,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is SessionDTO) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is AmountDTO) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is AnalyticsOptionsDTO) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is DropInConfigurationDTO) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is CardConfigurationDTO) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ApplePayConfigurationDTO) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is ApplePayContactDTO) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is ApplePayShippingMethodDTO) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is ApplePaySummaryItemDTO) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is GooglePayConfigurationDTO) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is MerchantInfoDTO) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is ShippingAddressParametersDTO) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is BillingAddressParametersDTO) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is CashAppPayConfigurationDTO) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is PaymentResultDTO) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is PaymentResultModelDTO) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is OrderResponseDTO) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is CheckoutEvent) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is ComponentCommunicationModel) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is PaymentEventDTO) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is ErrorDTO) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is DeletedStoredPaymentMethodResultDTO) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is CardComponentConfigurationDTO) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is InstantPaymentConfigurationDTO) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is InstantPaymentSetupResultDTO) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else if (value is UnencryptedCardDTO) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else if (value is EncryptedCardDTO) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    } else if (value is ActionComponentConfigurationDTO) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    } else if (value is OrderCancelResultDTO) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    } else if (value is BinLookupDataDTO) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    } else if (value is Environment) {
      buffer.putUint8(159);
      writeValue(buffer, value.index);
    } else if (value is AddressMode) {
      buffer.putUint8(160);
      writeValue(buffer, value.index);
    } else if (value is CardAuthMethod) {
      buffer.putUint8(161);
      writeValue(buffer, value.index);
    } else if (value is TotalPriceStatus) {
      buffer.putUint8(162);
      writeValue(buffer, value.index);
    } else if (value is GooglePayEnvironment) {
      buffer.putUint8(163);
      writeValue(buffer, value.index);
    } else if (value is CashAppPayEnvironment) {
      buffer.putUint8(164);
      writeValue(buffer, value.index);
    } else if (value is PaymentResultEnum) {
      buffer.putUint8(165);
      writeValue(buffer, value.index);
    } else if (value is CheckoutEventType) {
      buffer.putUint8(166);
      writeValue(buffer, value.index);
    } else if (value is ComponentCommunicationType) {
      buffer.putUint8(167);
      writeValue(buffer, value.index);
    } else if (value is PaymentEventType) {
      buffer.putUint8(168);
      writeValue(buffer, value.index);
    } else if (value is FieldVisibility) {
      buffer.putUint8(169);
      writeValue(buffer, value.index);
    } else if (value is InstantPaymentType) {
      buffer.putUint8(170);
      writeValue(buffer, value.index);
    } else if (value is ApplePayShippingType) {
      buffer.putUint8(171);
      writeValue(buffer, value.index);
    } else if (value is ApplePayMerchantCapability) {
      buffer.putUint8(172);
      writeValue(buffer, value.index);
    } else if (value is ApplePaySummaryItemType) {
      buffer.putUint8(173);
      writeValue(buffer, value.index);
    } else if (value is CardNumberValidationResultDTO) {
      buffer.putUint8(174);
      writeValue(buffer, value.index);
    } else if (value is CardExpiryDateValidationResultDTO) {
      buffer.putUint8(175);
      writeValue(buffer, value.index);
    } else if (value is CardSecurityCodeValidationResultDTO) {
      buffer.putUint8(176);
      writeValue(buffer, value.index);
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        return SessionDTO.decode(readValue(buffer)!);
      case 130:
        return AmountDTO.decode(readValue(buffer)!);
      case 131:
        return AnalyticsOptionsDTO.decode(readValue(buffer)!);
      case 132:
        return DropInConfigurationDTO.decode(readValue(buffer)!);
      case 133:
        return CardConfigurationDTO.decode(readValue(buffer)!);
      case 134:
        return ApplePayConfigurationDTO.decode(readValue(buffer)!);
      case 135:
        return ApplePayContactDTO.decode(readValue(buffer)!);
      case 136:
        return ApplePayShippingMethodDTO.decode(readValue(buffer)!);
      case 137:
        return ApplePaySummaryItemDTO.decode(readValue(buffer)!);
      case 138:
        return GooglePayConfigurationDTO.decode(readValue(buffer)!);
      case 139:
        return MerchantInfoDTO.decode(readValue(buffer)!);
      case 140:
        return ShippingAddressParametersDTO.decode(readValue(buffer)!);
      case 141:
        return BillingAddressParametersDTO.decode(readValue(buffer)!);
      case 142:
        return CashAppPayConfigurationDTO.decode(readValue(buffer)!);
      case 143:
        return PaymentResultDTO.decode(readValue(buffer)!);
      case 144:
        return PaymentResultModelDTO.decode(readValue(buffer)!);
      case 145:
        return OrderResponseDTO.decode(readValue(buffer)!);
      case 146:
        return CheckoutEvent.decode(readValue(buffer)!);
      case 147:
        return ComponentCommunicationModel.decode(readValue(buffer)!);
      case 148:
        return PaymentEventDTO.decode(readValue(buffer)!);
      case 149:
        return ErrorDTO.decode(readValue(buffer)!);
      case 150:
        return DeletedStoredPaymentMethodResultDTO.decode(readValue(buffer)!);
      case 151:
        return CardComponentConfigurationDTO.decode(readValue(buffer)!);
      case 152:
        return InstantPaymentConfigurationDTO.decode(readValue(buffer)!);
      case 153:
        return InstantPaymentSetupResultDTO.decode(readValue(buffer)!);
      case 154:
        return UnencryptedCardDTO.decode(readValue(buffer)!);
      case 155:
        return EncryptedCardDTO.decode(readValue(buffer)!);
      case 156:
        return ActionComponentConfigurationDTO.decode(readValue(buffer)!);
      case 157:
        return OrderCancelResultDTO.decode(readValue(buffer)!);
      case 158:
        return BinLookupDataDTO.decode(readValue(buffer)!);
      case 159:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : Environment.values[value];
      case 160:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AddressMode.values[value];
      case 161:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CardAuthMethod.values[value];
      case 162:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : TotalPriceStatus.values[value];
      case 163:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GooglePayEnvironment.values[value];
      case 164:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CashAppPayEnvironment.values[value];
      case 165:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PaymentResultEnum.values[value];
      case 166:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : CheckoutEventType.values[value];
      case 167:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ComponentCommunicationType.values[value];
      case 168:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PaymentEventType.values[value];
      case 169:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FieldVisibility.values[value];
      case 170:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : InstantPaymentType.values[value];
      case 171:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ApplePayShippingType.values[value];
      case 172:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ApplePayMerchantCapability.values[value];
      case 173:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ApplePaySummaryItemType.values[value];
      case 174:
        final int? value = readValue(buffer) as int?;
        return value == null
            ? null
            : CardNumberValidationResultDTO.values[value];
      case 175:
        final int? value = readValue(buffer) as int?;
        return value == null
            ? null
            : CardExpiryDateValidationResultDTO.values[value];
      case 176:
        final int? value = readValue(buffer) as int?;
        return value == null
            ? null
            : CardSecurityCodeValidationResultDTO.values[value];
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CheckoutPlatformInterface {
  /// Constructor for [CheckoutPlatformInterface].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CheckoutPlatformInterface(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String __pigeon_messageChannelSuffix;

  Future<String> getReturnUrl() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.getReturnUrl$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<SessionDTO> createSession(
      String sessionId, String sessionData, Object? configuration) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.createSession$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[sessionId, sessionData, configuration])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as SessionDTO?)!;
    }
  }

  Future<void> clearSession() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.clearSession$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<EncryptedCardDTO> encryptCard(
      UnencryptedCardDTO unencryptedCardDTO, String publicKey) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.encryptCard$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[unencryptedCardDTO, publicKey]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as EncryptedCardDTO?)!;
    }
  }

  Future<String> encryptBin(String bin, String publicKey) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.encryptBin$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[bin, publicKey]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as String?)!;
    }
  }

  Future<CardNumberValidationResultDTO> validateCardNumber(
      String cardNumber, bool enableLuhnCheck) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.validateCardNumber$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[cardNumber, enableLuhnCheck]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as CardNumberValidationResultDTO?)!;
    }
  }

  Future<CardExpiryDateValidationResultDTO> validateCardExpiryDate(
      String expiryMonth, String expiryYear) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.validateCardExpiryDate$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[expiryMonth, expiryYear]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as CardExpiryDateValidationResultDTO?)!;
    }
  }

  Future<CardSecurityCodeValidationResultDTO> validateCardSecurityCode(
      String securityCode, String? cardBrand) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.validateCardSecurityCode$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[securityCode, cardBrand]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as CardSecurityCodeValidationResultDTO?)!;
    }
  }

  Future<void> enableConsoleLogging(bool loggingEnabled) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.enableConsoleLogging$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[loggingEnabled]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class DropInPlatformInterface {
  /// Constructor for [DropInPlatformInterface].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  DropInPlatformInterface(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> showDropInSession(
      DropInConfigurationDTO dropInConfigurationDTO) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.showDropInSession$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[dropInConfigurationDTO]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> showDropInAdvanced(DropInConfigurationDTO dropInConfigurationDTO,
      String paymentMethodsResponse) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.showDropInAdvanced$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
            .send(<Object?>[dropInConfigurationDTO, paymentMethodsResponse])
        as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onPaymentsResult(PaymentEventDTO paymentsResult) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onPaymentsResult$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[paymentsResult]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onPaymentsDetailsResult(
      PaymentEventDTO paymentsDetailsResult) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onPaymentsDetailsResult$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[paymentsDetailsResult]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onDeleteStoredPaymentMethodResult(
      DeletedStoredPaymentMethodResultDTO
          deleteStoredPaymentMethodResultDTO) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onDeleteStoredPaymentMethodResult$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[deleteStoredPaymentMethodResultDTO]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onBalanceCheckResult(String balanceCheckResponse) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onBalanceCheckResult$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[balanceCheckResponse]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onOrderRequestResult(String orderRequestResponse) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onOrderRequestResult$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[orderRequestResponse]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onOrderCancelResult(
      OrderCancelResultDTO orderCancelResult) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onOrderCancelResult$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[orderCancelResult]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> cleanUpDropIn() async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.cleanUpDropIn$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class CheckoutFlutterInterface {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void send(CheckoutEvent event);

  static void setUp(
    CheckoutFlutterInterface? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.adyen_checkout.CheckoutFlutterInterface.send$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.adyen_checkout.CheckoutFlutterInterface.send was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CheckoutEvent? arg_event = (args[0] as CheckoutEvent?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.adyen_checkout.CheckoutFlutterInterface.send was null, expected non-null CheckoutEvent.');
          try {
            api.send(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class ComponentPlatformInterface {
  /// Constructor for [ComponentPlatformInterface].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ComponentPlatformInterface(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> updateViewHeight(int viewId) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.updateViewHeight$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[viewId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onPaymentsResult(
      String componentId, PaymentEventDTO paymentsResult) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onPaymentsResult$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[componentId, paymentsResult]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onPaymentsDetailsResult(
      String componentId, PaymentEventDTO paymentsDetailsResult) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onPaymentsDetailsResult$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[componentId, paymentsDetailsResult]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<InstantPaymentSetupResultDTO> isInstantPaymentSupportedByPlatform(
      InstantPaymentConfigurationDTO instantPaymentConfigurationDTO,
      String paymentMethodResponse,
      String componentId) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.isInstantPaymentSupportedByPlatform$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[
      instantPaymentConfigurationDTO,
      paymentMethodResponse,
      componentId
    ]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as InstantPaymentSetupResultDTO?)!;
    }
  }

  Future<void> onInstantPaymentPressed(
      InstantPaymentConfigurationDTO instantPaymentConfigurationDTO,
      String encodedPaymentMethod,
      String componentId) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onInstantPaymentPressed$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[
      instantPaymentConfigurationDTO,
      encodedPaymentMethod,
      componentId
    ]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> handleAction(
      ActionComponentConfigurationDTO actionComponentConfiguration,
      String componentId,
      Map<String?, Object?>? actionResponse) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.handleAction$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList = await __pigeon_channel
        .send(<Object?>[
      actionComponentConfiguration,
      componentId,
      actionResponse
    ]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> onDispose(String componentId) async {
    final String __pigeon_channelName =
        'dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onDispose$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel =
        BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[componentId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class ComponentFlutterInterface {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void _generateCodecForDTOs(
      CardComponentConfigurationDTO cardComponentConfigurationDTO,
      SessionDTO sessionDTO,
      BinLookupDataDTO binLookupDataDTO);

  void onComponentCommunication(
      ComponentCommunicationModel componentCommunicationModel);

  static void setUp(
    ComponentFlutterInterface? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface._generateCodecForDTOs$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface._generateCodecForDTOs was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CardComponentConfigurationDTO?
              arg_cardComponentConfigurationDTO =
              (args[0] as CardComponentConfigurationDTO?);
          assert(arg_cardComponentConfigurationDTO != null,
              'Argument for dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface._generateCodecForDTOs was null, expected non-null CardComponentConfigurationDTO.');
          final SessionDTO? arg_sessionDTO = (args[1] as SessionDTO?);
          assert(arg_sessionDTO != null,
              'Argument for dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface._generateCodecForDTOs was null, expected non-null SessionDTO.');
          final BinLookupDataDTO? arg_binLookupDataDTO =
              (args[2] as BinLookupDataDTO?);
          assert(arg_binLookupDataDTO != null,
              'Argument for dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface._generateCodecForDTOs was null, expected non-null BinLookupDataDTO.');
          try {
            api._generateCodecForDTOs(arg_cardComponentConfigurationDTO!,
                arg_sessionDTO!, arg_binLookupDataDTO!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface.onComponentCommunication$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface.onComponentCommunication was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ComponentCommunicationModel? arg_componentCommunicationModel =
              (args[0] as ComponentCommunicationModel?);
          assert(arg_componentCommunicationModel != null,
              'Argument for dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface.onComponentCommunication was null, expected non-null ComponentCommunicationModel.');
          try {
            api.onComponentCommunication(arg_componentCommunicationModel!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
