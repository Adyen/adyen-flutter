// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum Environment: Int {
  case test = 0
  case europe = 1
  case unitedStates = 2
  case australia = 3
  case india = 4
  case apse = 5
}

enum AddressMode: Int {
  case full = 0
  case postalCode = 1
  case none = 2
}

enum CardAuthMethod: Int {
  case panOnly = 0
  case cryptogram3DS = 1
}

enum TotalPriceStatus: Int {
  case notCurrentlyKnown = 0
  case estimated = 1
  case finalPrice = 2
}

enum GooglePayEnvironment: Int {
  case test = 0
  case production = 1
}

enum CashAppPayEnvironment: Int {
  case sandbox = 0
  case production = 1
}

enum PaymentResultEnum: Int {
  case cancelledByUser = 0
  case error = 1
  case finished = 2
}

enum PlatformCommunicationType: Int {
  case paymentComponent = 0
  case additionalDetails = 1
  case result = 2
  case deleteStoredPaymentMethod = 3
}

enum ComponentCommunicationType: Int {
  case onSubmit = 0
  case additionalDetails = 1
  case result = 2
  case error = 3
  case resize = 4
}

enum PaymentResultType: Int {
  case finished = 0
  case action = 1
  case error = 2
}

enum FieldVisibility: Int {
  case show = 0
  case hide = 1
}

/// Generated class from Pigeon that represents data sent in messages.
struct SessionDTO {
  var id: String
  var sessionData: String
  var paymentMethodsJson: String

  static func fromList(_ list: [Any?]) -> SessionDTO? {
    let id = list[0] as! String
    let sessionData = list[1] as! String
    let paymentMethodsJson = list[2] as! String

    return SessionDTO(
      id: id,
      sessionData: sessionData,
      paymentMethodsJson: paymentMethodsJson
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      sessionData,
      paymentMethodsJson,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AmountDTO {
  var currency: String
  var value: Int64

  static func fromList(_ list: [Any?]) -> AmountDTO? {
    let currency = list[0] as! String
    let value = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)

    return AmountDTO(
      currency: currency,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      currency,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct AnalyticsOptionsDTO {
  var enabled: Bool
  var version: String

  static func fromList(_ list: [Any?]) -> AnalyticsOptionsDTO? {
    let enabled = list[0] as! Bool
    let version = list[1] as! String

    return AnalyticsOptionsDTO(
      enabled: enabled,
      version: version
    )
  }
  func toList() -> [Any?] {
    return [
      enabled,
      version,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DropInConfigurationDTO {
  var environment: Environment
  var clientKey: String
  var countryCode: String
  var amount: AmountDTO
  var shopperLocale: String
  var cardConfigurationDTO: CardConfigurationDTO? = nil
  var applePayConfigurationDTO: ApplePayConfigurationDTO? = nil
  var googlePayConfigurationDTO: GooglePayConfigurationDTO? = nil
  var cashAppPayConfigurationDTO: CashAppPayConfigurationDTO? = nil
  var analyticsOptionsDTO: AnalyticsOptionsDTO
  var showPreselectedStoredPaymentMethod: Bool
  var skipListWhenSinglePaymentMethod: Bool
  var isRemoveStoredPaymentMethodEnabled: Bool

  static func fromList(_ list: [Any?]) -> DropInConfigurationDTO? {
    let environment = Environment(rawValue: list[0] as! Int)!
    let clientKey = list[1] as! String
    let countryCode = list[2] as! String
    let amount = AmountDTO.fromList(list[3] as! [Any?])!
    let shopperLocale = list[4] as! String
    var cardConfigurationDTO: CardConfigurationDTO? = nil
    if let cardConfigurationDTOList: [Any?] = nilOrValue(list[5]) {
      cardConfigurationDTO = CardConfigurationDTO.fromList(cardConfigurationDTOList)
    }
    var applePayConfigurationDTO: ApplePayConfigurationDTO? = nil
    if let applePayConfigurationDTOList: [Any?] = nilOrValue(list[6]) {
      applePayConfigurationDTO = ApplePayConfigurationDTO.fromList(applePayConfigurationDTOList)
    }
    var googlePayConfigurationDTO: GooglePayConfigurationDTO? = nil
    if let googlePayConfigurationDTOList: [Any?] = nilOrValue(list[7]) {
      googlePayConfigurationDTO = GooglePayConfigurationDTO.fromList(googlePayConfigurationDTOList)
    }
    var cashAppPayConfigurationDTO: CashAppPayConfigurationDTO? = nil
    if let cashAppPayConfigurationDTOList: [Any?] = nilOrValue(list[8]) {
      cashAppPayConfigurationDTO = CashAppPayConfigurationDTO.fromList(cashAppPayConfigurationDTOList)
    }
    let analyticsOptionsDTO = AnalyticsOptionsDTO.fromList(list[9] as! [Any?])!
    let showPreselectedStoredPaymentMethod = list[10] as! Bool
    let skipListWhenSinglePaymentMethod = list[11] as! Bool
    let isRemoveStoredPaymentMethodEnabled = list[12] as! Bool

    return DropInConfigurationDTO(
      environment: environment,
      clientKey: clientKey,
      countryCode: countryCode,
      amount: amount,
      shopperLocale: shopperLocale,
      cardConfigurationDTO: cardConfigurationDTO,
      applePayConfigurationDTO: applePayConfigurationDTO,
      googlePayConfigurationDTO: googlePayConfigurationDTO,
      cashAppPayConfigurationDTO: cashAppPayConfigurationDTO,
      analyticsOptionsDTO: analyticsOptionsDTO,
      showPreselectedStoredPaymentMethod: showPreselectedStoredPaymentMethod,
      skipListWhenSinglePaymentMethod: skipListWhenSinglePaymentMethod,
      isRemoveStoredPaymentMethodEnabled: isRemoveStoredPaymentMethodEnabled
    )
  }
  func toList() -> [Any?] {
    return [
      environment.rawValue,
      clientKey,
      countryCode,
      amount.toList(),
      shopperLocale,
      cardConfigurationDTO?.toList(),
      applePayConfigurationDTO?.toList(),
      googlePayConfigurationDTO?.toList(),
      cashAppPayConfigurationDTO?.toList(),
      analyticsOptionsDTO.toList(),
      showPreselectedStoredPaymentMethod,
      skipListWhenSinglePaymentMethod,
      isRemoveStoredPaymentMethodEnabled,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CardConfigurationDTO {
  var holderNameRequired: Bool
  var addressMode: AddressMode
  var showStorePaymentField: Bool
  var showCvcForStoredCard: Bool
  var showCvc: Bool
  var kcpFieldVisibility: FieldVisibility
  var socialSecurityNumberFieldVisibility: FieldVisibility
  var supportedCardTypes: [String?]

  static func fromList(_ list: [Any?]) -> CardConfigurationDTO? {
    let holderNameRequired = list[0] as! Bool
    let addressMode = AddressMode(rawValue: list[1] as! Int)!
    let showStorePaymentField = list[2] as! Bool
    let showCvcForStoredCard = list[3] as! Bool
    let showCvc = list[4] as! Bool
    let kcpFieldVisibility = FieldVisibility(rawValue: list[5] as! Int)!
    let socialSecurityNumberFieldVisibility = FieldVisibility(rawValue: list[6] as! Int)!
    let supportedCardTypes = list[7] as! [String?]

    return CardConfigurationDTO(
      holderNameRequired: holderNameRequired,
      addressMode: addressMode,
      showStorePaymentField: showStorePaymentField,
      showCvcForStoredCard: showCvcForStoredCard,
      showCvc: showCvc,
      kcpFieldVisibility: kcpFieldVisibility,
      socialSecurityNumberFieldVisibility: socialSecurityNumberFieldVisibility,
      supportedCardTypes: supportedCardTypes
    )
  }
  func toList() -> [Any?] {
    return [
      holderNameRequired,
      addressMode.rawValue,
      showStorePaymentField,
      showCvcForStoredCard,
      showCvc,
      kcpFieldVisibility.rawValue,
      socialSecurityNumberFieldVisibility.rawValue,
      supportedCardTypes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ApplePayConfigurationDTO {
  var merchantId: String
  var merchantName: String
  var allowOnboarding: Bool

  static func fromList(_ list: [Any?]) -> ApplePayConfigurationDTO? {
    let merchantId = list[0] as! String
    let merchantName = list[1] as! String
    let allowOnboarding = list[2] as! Bool

    return ApplePayConfigurationDTO(
      merchantId: merchantId,
      merchantName: merchantName,
      allowOnboarding: allowOnboarding
    )
  }
  func toList() -> [Any?] {
    return [
      merchantId,
      merchantName,
      allowOnboarding,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct GooglePayConfigurationDTO {
  var googlePayEnvironment: GooglePayEnvironment
  var merchantAccount: String? = nil
  var allowedCardNetworks: [String?]
  var allowedAuthMethods: [String?]
  var totalPriceStatus: TotalPriceStatus? = nil
  var allowPrepaidCards: Bool
  var billingAddressRequired: Bool
  var emailRequired: Bool
  var shippingAddressRequired: Bool
  var existingPaymentMethodRequired: Bool

  static func fromList(_ list: [Any?]) -> GooglePayConfigurationDTO? {
    let googlePayEnvironment = GooglePayEnvironment(rawValue: list[0] as! Int)!
    let merchantAccount: String? = nilOrValue(list[1])
    let allowedCardNetworks = list[2] as! [String?]
    let allowedAuthMethods = list[3] as! [String?]
    var totalPriceStatus: TotalPriceStatus? = nil
    let totalPriceStatusEnumVal: Int? = nilOrValue(list[4])
    if let totalPriceStatusRawValue = totalPriceStatusEnumVal {
      totalPriceStatus = TotalPriceStatus(rawValue: totalPriceStatusRawValue)!
    }
    let allowPrepaidCards = list[5] as! Bool
    let billingAddressRequired = list[6] as! Bool
    let emailRequired = list[7] as! Bool
    let shippingAddressRequired = list[8] as! Bool
    let existingPaymentMethodRequired = list[9] as! Bool

    return GooglePayConfigurationDTO(
      googlePayEnvironment: googlePayEnvironment,
      merchantAccount: merchantAccount,
      allowedCardNetworks: allowedCardNetworks,
      allowedAuthMethods: allowedAuthMethods,
      totalPriceStatus: totalPriceStatus,
      allowPrepaidCards: allowPrepaidCards,
      billingAddressRequired: billingAddressRequired,
      emailRequired: emailRequired,
      shippingAddressRequired: shippingAddressRequired,
      existingPaymentMethodRequired: existingPaymentMethodRequired
    )
  }
  func toList() -> [Any?] {
    return [
      googlePayEnvironment.rawValue,
      merchantAccount,
      allowedCardNetworks,
      allowedAuthMethods,
      totalPriceStatus?.rawValue,
      allowPrepaidCards,
      billingAddressRequired,
      emailRequired,
      shippingAddressRequired,
      existingPaymentMethodRequired,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CashAppPayConfigurationDTO {
  var cashAppPayEnvironment: CashAppPayEnvironment
  var returnUrl: String

  static func fromList(_ list: [Any?]) -> CashAppPayConfigurationDTO? {
    let cashAppPayEnvironment = CashAppPayEnvironment(rawValue: list[0] as! Int)!
    let returnUrl = list[1] as! String

    return CashAppPayConfigurationDTO(
      cashAppPayEnvironment: cashAppPayEnvironment,
      returnUrl: returnUrl
    )
  }
  func toList() -> [Any?] {
    return [
      cashAppPayEnvironment.rawValue,
      returnUrl,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PaymentResultDTO {
  var type: PaymentResultEnum
  var reason: String? = nil
  var result: PaymentResultModelDTO? = nil

  static func fromList(_ list: [Any?]) -> PaymentResultDTO? {
    let type = PaymentResultEnum(rawValue: list[0] as! Int)!
    let reason: String? = nilOrValue(list[1])
    var result: PaymentResultModelDTO? = nil
    if let resultList: [Any?] = nilOrValue(list[2]) {
      result = PaymentResultModelDTO.fromList(resultList)
    }

    return PaymentResultDTO(
      type: type,
      reason: reason,
      result: result
    )
  }
  func toList() -> [Any?] {
    return [
      type.rawValue,
      reason,
      result?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PaymentResultModelDTO {
  var sessionId: String? = nil
  var sessionData: String? = nil
  var sessionResult: String? = nil
  var resultCode: String? = nil
  var order: OrderResponseDTO? = nil

  static func fromList(_ list: [Any?]) -> PaymentResultModelDTO? {
    let sessionId: String? = nilOrValue(list[0])
    let sessionData: String? = nilOrValue(list[1])
    let sessionResult: String? = nilOrValue(list[2])
    let resultCode: String? = nilOrValue(list[3])
    var order: OrderResponseDTO? = nil
    if let orderList: [Any?] = nilOrValue(list[4]) {
      order = OrderResponseDTO.fromList(orderList)
    }

    return PaymentResultModelDTO(
      sessionId: sessionId,
      sessionData: sessionData,
      sessionResult: sessionResult,
      resultCode: resultCode,
      order: order
    )
  }
  func toList() -> [Any?] {
    return [
      sessionId,
      sessionData,
      sessionResult,
      resultCode,
      order?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct OrderResponseDTO {
  var pspReference: String
  var orderData: String
  var amount: AmountDTO? = nil
  var remainingAmount: AmountDTO? = nil

  static func fromList(_ list: [Any?]) -> OrderResponseDTO? {
    let pspReference = list[0] as! String
    let orderData = list[1] as! String
    var amount: AmountDTO? = nil
    if let amountList: [Any?] = nilOrValue(list[2]) {
      amount = AmountDTO.fromList(amountList)
    }
    var remainingAmount: AmountDTO? = nil
    if let remainingAmountList: [Any?] = nilOrValue(list[3]) {
      remainingAmount = AmountDTO.fromList(remainingAmountList)
    }

    return OrderResponseDTO(
      pspReference: pspReference,
      orderData: orderData,
      amount: amount,
      remainingAmount: remainingAmount
    )
  }
  func toList() -> [Any?] {
    return [
      pspReference,
      orderData,
      amount?.toList(),
      remainingAmount?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlatformCommunicationModel {
  var type: PlatformCommunicationType
  var data: String? = nil
  var paymentResult: PaymentResultDTO? = nil

  static func fromList(_ list: [Any?]) -> PlatformCommunicationModel? {
    let type = PlatformCommunicationType(rawValue: list[0] as! Int)!
    let data: String? = nilOrValue(list[1])
    var paymentResult: PaymentResultDTO? = nil
    if let paymentResultList: [Any?] = nilOrValue(list[2]) {
      paymentResult = PaymentResultDTO.fromList(paymentResultList)
    }

    return PlatformCommunicationModel(
      type: type,
      data: data,
      paymentResult: paymentResult
    )
  }
  func toList() -> [Any?] {
    return [
      type.rawValue,
      data,
      paymentResult?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ComponentCommunicationModel {
  var type: ComponentCommunicationType
  var data: Any? = nil
  var paymentResult: PaymentResultModelDTO? = nil

  static func fromList(_ list: [Any?]) -> ComponentCommunicationModel? {
    let type = ComponentCommunicationType(rawValue: list[0] as! Int)!
    let data: Any? = list[1]
    var paymentResult: PaymentResultModelDTO? = nil
    if let paymentResultList: [Any?] = nilOrValue(list[2]) {
      paymentResult = PaymentResultModelDTO.fromList(paymentResultList)
    }

    return ComponentCommunicationModel(
      type: type,
      data: data,
      paymentResult: paymentResult
    )
  }
  func toList() -> [Any?] {
    return [
      type.rawValue,
      data,
      paymentResult?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PaymentOutcomeDTO {
  var paymentResultType: PaymentResultType
  var result: String? = nil
  var actionResponse: [String?: Any?]? = nil
  var error: ErrorDTO? = nil

  static func fromList(_ list: [Any?]) -> PaymentOutcomeDTO? {
    let paymentResultType = PaymentResultType(rawValue: list[0] as! Int)!
    let result: String? = nilOrValue(list[1])
    let actionResponse: [String?: Any?]? = nilOrValue(list[2])
    var error: ErrorDTO? = nil
    if let errorList: [Any?] = nilOrValue(list[3]) {
      error = ErrorDTO.fromList(errorList)
    }

    return PaymentOutcomeDTO(
      paymentResultType: paymentResultType,
      result: result,
      actionResponse: actionResponse,
      error: error
    )
  }
  func toList() -> [Any?] {
    return [
      paymentResultType.rawValue,
      result,
      actionResponse,
      error?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ErrorDTO {
  var errorMessage: String? = nil
  var reason: String? = nil
  var dismissDropIn: Bool? = nil

  static func fromList(_ list: [Any?]) -> ErrorDTO? {
    let errorMessage: String? = nilOrValue(list[0])
    let reason: String? = nilOrValue(list[1])
    let dismissDropIn: Bool? = nilOrValue(list[2])

    return ErrorDTO(
      errorMessage: errorMessage,
      reason: reason,
      dismissDropIn: dismissDropIn
    )
  }
  func toList() -> [Any?] {
    return [
      errorMessage,
      reason,
      dismissDropIn,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DeletedStoredPaymentMethodResultDTO {
  var storedPaymentMethodId: String
  var isSuccessfullyRemoved: Bool

  static func fromList(_ list: [Any?]) -> DeletedStoredPaymentMethodResultDTO? {
    let storedPaymentMethodId = list[0] as! String
    let isSuccessfullyRemoved = list[1] as! Bool

    return DeletedStoredPaymentMethodResultDTO(
      storedPaymentMethodId: storedPaymentMethodId,
      isSuccessfullyRemoved: isSuccessfullyRemoved
    )
  }
  func toList() -> [Any?] {
    return [
      storedPaymentMethodId,
      isSuccessfullyRemoved,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CardComponentConfigurationDTO {
  var environment: Environment
  var clientKey: String
  var countryCode: String
  var amount: AmountDTO
  var shopperLocale: String? = nil
  var cardConfiguration: CardConfigurationDTO
  var analyticsOptionsDTO: AnalyticsOptionsDTO

  static func fromList(_ list: [Any?]) -> CardComponentConfigurationDTO? {
    let environment = Environment(rawValue: list[0] as! Int)!
    let clientKey = list[1] as! String
    let countryCode = list[2] as! String
    let amount = AmountDTO.fromList(list[3] as! [Any?])!
    let shopperLocale: String? = nilOrValue(list[4])
    let cardConfiguration = CardConfigurationDTO.fromList(list[5] as! [Any?])!
    let analyticsOptionsDTO = AnalyticsOptionsDTO.fromList(list[6] as! [Any?])!

    return CardComponentConfigurationDTO(
      environment: environment,
      clientKey: clientKey,
      countryCode: countryCode,
      amount: amount,
      shopperLocale: shopperLocale,
      cardConfiguration: cardConfiguration,
      analyticsOptionsDTO: analyticsOptionsDTO
    )
  }
  func toList() -> [Any?] {
    return [
      environment.rawValue,
      clientKey,
      countryCode,
      amount.toList(),
      shopperLocale,
      cardConfiguration.toList(),
      analyticsOptionsDTO.toList(),
    ]
  }
}

private class CheckoutPlatformInterfaceCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AmountDTO.fromList(self.readValue() as! [Any?])
      case 129:
        return AnalyticsOptionsDTO.fromList(self.readValue() as! [Any?])
      case 130:
        return ApplePayConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 131:
        return CardComponentConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 132:
        return CardConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 133:
        return CashAppPayConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 134:
        return ComponentCommunicationModel.fromList(self.readValue() as! [Any?])
      case 135:
        return DeletedStoredPaymentMethodResultDTO.fromList(self.readValue() as! [Any?])
      case 136:
        return DropInConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 137:
        return ErrorDTO.fromList(self.readValue() as! [Any?])
      case 138:
        return GooglePayConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 139:
        return OrderResponseDTO.fromList(self.readValue() as! [Any?])
      case 140:
        return PaymentOutcomeDTO.fromList(self.readValue() as! [Any?])
      case 141:
        return PaymentResultDTO.fromList(self.readValue() as! [Any?])
      case 142:
        return PaymentResultModelDTO.fromList(self.readValue() as! [Any?])
      case 143:
        return PlatformCommunicationModel.fromList(self.readValue() as! [Any?])
      case 144:
        return SessionDTO.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class CheckoutPlatformInterfaceCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AmountDTO {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? AnalyticsOptionsDTO {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ApplePayConfigurationDTO {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? CardComponentConfigurationDTO {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? CardConfigurationDTO {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? CashAppPayConfigurationDTO {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? ComponentCommunicationModel {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? DeletedStoredPaymentMethodResultDTO {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? DropInConfigurationDTO {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? ErrorDTO {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? GooglePayConfigurationDTO {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? OrderResponseDTO {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? PaymentOutcomeDTO {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else if let value = value as? PaymentResultDTO {
      super.writeByte(141)
      super.writeValue(value.toList())
    } else if let value = value as? PaymentResultModelDTO {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else if let value = value as? PlatformCommunicationModel {
      super.writeByte(143)
      super.writeValue(value.toList())
    } else if let value = value as? SessionDTO {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class CheckoutPlatformInterfaceCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CheckoutPlatformInterfaceCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CheckoutPlatformInterfaceCodecWriter(data: data)
  }
}

class CheckoutPlatformInterfaceCodec: FlutterStandardMessageCodec {
  static let shared = CheckoutPlatformInterfaceCodec(readerWriter: CheckoutPlatformInterfaceCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CheckoutPlatformInterface {
  func getReturnUrl(completion: @escaping (Result<String, Error>) -> Void)
  func createSession(sessionId: String, sessionData: String, configuration: Any?, completion: @escaping (Result<SessionDTO, Error>) -> Void)
  func enableConsoleLogging(loggingEnabled: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CheckoutPlatformInterfaceSetup {
  /// The codec used by CheckoutPlatformInterface.
  static var codec: FlutterStandardMessageCodec { CheckoutPlatformInterfaceCodec.shared }
  /// Sets up an instance of `CheckoutPlatformInterface` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CheckoutPlatformInterface?) {
    let getReturnUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.getReturnUrl", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getReturnUrlChannel.setMessageHandler { _, reply in
        api.getReturnUrl() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getReturnUrlChannel.setMessageHandler(nil)
    }
    let createSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.createSession", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let sessionIdArg = args[0] as! String
        let sessionDataArg = args[1] as! String
        let configurationArg: Any? = args[2]
        api.createSession(sessionId: sessionIdArg, sessionData: sessionDataArg, configuration: configurationArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      createSessionChannel.setMessageHandler(nil)
    }
    let enableConsoleLoggingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.CheckoutPlatformInterface.enableConsoleLogging", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      enableConsoleLoggingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let loggingEnabledArg = args[0] as! Bool
        do {
          try api.enableConsoleLogging(loggingEnabled: loggingEnabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      enableConsoleLoggingChannel.setMessageHandler(nil)
    }
  }
}
private class DropInPlatformInterfaceCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AmountDTO.fromList(self.readValue() as! [Any?])
      case 129:
        return AnalyticsOptionsDTO.fromList(self.readValue() as! [Any?])
      case 130:
        return ApplePayConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 131:
        return CardConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 132:
        return CashAppPayConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 133:
        return DeletedStoredPaymentMethodResultDTO.fromList(self.readValue() as! [Any?])
      case 134:
        return DropInConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 135:
        return ErrorDTO.fromList(self.readValue() as! [Any?])
      case 136:
        return GooglePayConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 137:
        return PaymentOutcomeDTO.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class DropInPlatformInterfaceCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AmountDTO {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? AnalyticsOptionsDTO {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ApplePayConfigurationDTO {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? CardConfigurationDTO {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? CashAppPayConfigurationDTO {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? DeletedStoredPaymentMethodResultDTO {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? DropInConfigurationDTO {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? ErrorDTO {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? GooglePayConfigurationDTO {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? PaymentOutcomeDTO {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DropInPlatformInterfaceCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DropInPlatformInterfaceCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DropInPlatformInterfaceCodecWriter(data: data)
  }
}

class DropInPlatformInterfaceCodec: FlutterStandardMessageCodec {
  static let shared = DropInPlatformInterfaceCodec(readerWriter: DropInPlatformInterfaceCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol DropInPlatformInterface {
  func showDropInSession(dropInConfigurationDTO: DropInConfigurationDTO) throws
  func showDropInAdvanced(dropInConfigurationDTO: DropInConfigurationDTO, paymentMethodsResponse: String) throws
  func onPaymentsResult(paymentsResult: PaymentOutcomeDTO) throws
  func onPaymentsDetailsResult(paymentsDetailsResult: PaymentOutcomeDTO) throws
  func onDeleteStoredPaymentMethodResult(deleteStoredPaymentMethodResultDTO: DeletedStoredPaymentMethodResultDTO) throws
  func cleanUpDropIn() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DropInPlatformInterfaceSetup {
  /// The codec used by DropInPlatformInterface.
  static var codec: FlutterStandardMessageCodec { DropInPlatformInterfaceCodec.shared }
  /// Sets up an instance of `DropInPlatformInterface` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: DropInPlatformInterface?) {
    let showDropInSessionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.showDropInSession", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showDropInSessionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dropInConfigurationDTOArg = args[0] as! DropInConfigurationDTO
        do {
          try api.showDropInSession(dropInConfigurationDTO: dropInConfigurationDTOArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      showDropInSessionChannel.setMessageHandler(nil)
    }
    let showDropInAdvancedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.showDropInAdvanced", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showDropInAdvancedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dropInConfigurationDTOArg = args[0] as! DropInConfigurationDTO
        let paymentMethodsResponseArg = args[1] as! String
        do {
          try api.showDropInAdvanced(dropInConfigurationDTO: dropInConfigurationDTOArg, paymentMethodsResponse: paymentMethodsResponseArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      showDropInAdvancedChannel.setMessageHandler(nil)
    }
    let onPaymentsResultChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onPaymentsResult", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onPaymentsResultChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paymentsResultArg = args[0] as! PaymentOutcomeDTO
        do {
          try api.onPaymentsResult(paymentsResult: paymentsResultArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onPaymentsResultChannel.setMessageHandler(nil)
    }
    let onPaymentsDetailsResultChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onPaymentsDetailsResult", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onPaymentsDetailsResultChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paymentsDetailsResultArg = args[0] as! PaymentOutcomeDTO
        do {
          try api.onPaymentsDetailsResult(paymentsDetailsResult: paymentsDetailsResultArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onPaymentsDetailsResultChannel.setMessageHandler(nil)
    }
    let onDeleteStoredPaymentMethodResultChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.onDeleteStoredPaymentMethodResult", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onDeleteStoredPaymentMethodResultChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let deleteStoredPaymentMethodResultDTOArg = args[0] as! DeletedStoredPaymentMethodResultDTO
        do {
          try api.onDeleteStoredPaymentMethodResult(deleteStoredPaymentMethodResultDTO: deleteStoredPaymentMethodResultDTOArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onDeleteStoredPaymentMethodResultChannel.setMessageHandler(nil)
    }
    let cleanUpDropInChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.DropInPlatformInterface.cleanUpDropIn", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cleanUpDropInChannel.setMessageHandler { _, reply in
        do {
          try api.cleanUpDropIn()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      cleanUpDropInChannel.setMessageHandler(nil)
    }
  }
}
private class DropInFlutterInterfaceCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AmountDTO.fromList(self.readValue() as! [Any?])
      case 129:
        return OrderResponseDTO.fromList(self.readValue() as! [Any?])
      case 130:
        return PaymentResultDTO.fromList(self.readValue() as! [Any?])
      case 131:
        return PaymentResultModelDTO.fromList(self.readValue() as! [Any?])
      case 132:
        return PlatformCommunicationModel.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class DropInFlutterInterfaceCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AmountDTO {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? OrderResponseDTO {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? PaymentResultDTO {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PaymentResultModelDTO {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? PlatformCommunicationModel {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DropInFlutterInterfaceCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DropInFlutterInterfaceCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DropInFlutterInterfaceCodecWriter(data: data)
  }
}

class DropInFlutterInterfaceCodec: FlutterStandardMessageCodec {
  static let shared = DropInFlutterInterfaceCodec(readerWriter: DropInFlutterInterfaceCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol DropInFlutterInterfaceProtocol {
  func onDropInSessionPlatformCommunication(platformCommunicationModel platformCommunicationModelArg: PlatformCommunicationModel, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onDropInAdvancedPlatformCommunication(platformCommunicationModel platformCommunicationModelArg: PlatformCommunicationModel, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class DropInFlutterInterface: DropInFlutterInterfaceProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return DropInFlutterInterfaceCodec.shared
  }
  func onDropInSessionPlatformCommunication(platformCommunicationModel platformCommunicationModelArg: PlatformCommunicationModel, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.adyen_checkout.DropInFlutterInterface.onDropInSessionPlatformCommunication"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([platformCommunicationModelArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onDropInAdvancedPlatformCommunication(platformCommunicationModel platformCommunicationModelArg: PlatformCommunicationModel, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.adyen_checkout.DropInFlutterInterface.onDropInAdvancedPlatformCommunication"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([platformCommunicationModelArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else {
        completion(.success(Void()))
      }
    }
  }
}
private class ComponentPlatformInterfaceCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return ErrorDTO.fromList(self.readValue() as! [Any?])
      case 129:
        return PaymentOutcomeDTO.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ComponentPlatformInterfaceCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ErrorDTO {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? PaymentOutcomeDTO {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ComponentPlatformInterfaceCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ComponentPlatformInterfaceCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ComponentPlatformInterfaceCodecWriter(data: data)
  }
}

class ComponentPlatformInterfaceCodec: FlutterStandardMessageCodec {
  static let shared = ComponentPlatformInterfaceCodec(readerWriter: ComponentPlatformInterfaceCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ComponentPlatformInterface {
  func updateViewHeight(viewId: Int64) throws
  func onPaymentsResult(paymentsResult: PaymentOutcomeDTO) throws
  func onPaymentsDetailsResult(paymentsDetailsResult: PaymentOutcomeDTO) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ComponentPlatformInterfaceSetup {
  /// The codec used by ComponentPlatformInterface.
  static var codec: FlutterStandardMessageCodec { ComponentPlatformInterfaceCodec.shared }
  /// Sets up an instance of `ComponentPlatformInterface` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ComponentPlatformInterface?) {
    let updateViewHeightChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.updateViewHeight", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateViewHeightChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let viewIdArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.updateViewHeight(viewId: viewIdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updateViewHeightChannel.setMessageHandler(nil)
    }
    let onPaymentsResultChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onPaymentsResult", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onPaymentsResultChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paymentsResultArg = args[0] as! PaymentOutcomeDTO
        do {
          try api.onPaymentsResult(paymentsResult: paymentsResultArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onPaymentsResultChannel.setMessageHandler(nil)
    }
    let onPaymentsDetailsResultChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.adyen_checkout.ComponentPlatformInterface.onPaymentsDetailsResult", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onPaymentsDetailsResultChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let paymentsDetailsResultArg = args[0] as! PaymentOutcomeDTO
        do {
          try api.onPaymentsDetailsResult(paymentsDetailsResult: paymentsDetailsResultArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onPaymentsDetailsResultChannel.setMessageHandler(nil)
    }
  }
}
private class ComponentFlutterInterfaceCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return AmountDTO.fromList(self.readValue() as! [Any?])
      case 129:
        return AmountDTO.fromList(self.readValue() as! [Any?])
      case 130:
        return AnalyticsOptionsDTO.fromList(self.readValue() as! [Any?])
      case 131:
        return CardComponentConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 132:
        return CardConfigurationDTO.fromList(self.readValue() as! [Any?])
      case 133:
        return ComponentCommunicationModel.fromList(self.readValue() as! [Any?])
      case 134:
        return OrderResponseDTO.fromList(self.readValue() as! [Any?])
      case 135:
        return PaymentResultModelDTO.fromList(self.readValue() as! [Any?])
      case 136:
        return SessionDTO.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class ComponentFlutterInterfaceCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AmountDTO {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? AmountDTO {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? AnalyticsOptionsDTO {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? CardComponentConfigurationDTO {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? CardConfigurationDTO {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? ComponentCommunicationModel {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? OrderResponseDTO {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? PaymentResultModelDTO {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? SessionDTO {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class ComponentFlutterInterfaceCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return ComponentFlutterInterfaceCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return ComponentFlutterInterfaceCodecWriter(data: data)
  }
}

class ComponentFlutterInterfaceCodec: FlutterStandardMessageCodec {
  static let shared = ComponentFlutterInterfaceCodec(readerWriter: ComponentFlutterInterfaceCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol ComponentFlutterInterfaceProtocol {
  func _generateCodecForDTOs(cardComponentConfigurationDTO cardComponentConfigurationDTOArg: CardComponentConfigurationDTO, sessionDTO sessionDTOArg: SessionDTO, completion: @escaping (Result<Void, FlutterError>) -> Void)
  func onComponentCommunication(componentCommunicationModel componentCommunicationModelArg: ComponentCommunicationModel, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class ComponentFlutterInterface: ComponentFlutterInterfaceProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return ComponentFlutterInterfaceCodec.shared
  }
  func _generateCodecForDTOs(cardComponentConfigurationDTO cardComponentConfigurationDTOArg: CardComponentConfigurationDTO, sessionDTO sessionDTOArg: SessionDTO, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface._generateCodecForDTOs"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([cardComponentConfigurationDTOArg, sessionDTOArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onComponentCommunication(componentCommunicationModel componentCommunicationModelArg: ComponentCommunicationModel, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.adyen_checkout.ComponentFlutterInterface.onComponentCommunication"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([componentCommunicationModelArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName:channelName)))
        return
      }
      if (listResponse.count > 1) {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)));
      } else {
        completion(.success(Void()))
      }
    }
  }
}
